/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analyzer = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[1,9],$V3=[1,28],$V4=[1,29],$V5=[1,30],$V6=[1,31],$V7=[1,32],$V8=[1,20],$V9=[1,21],$Va=[1,22],$Vb=[1,23],$Vc=[1,24],$Vd=[1,25],$Ve=[1,33],$Vf=[5,37,45,47],$Vg=[5,8,10,11,24,25,26,27,28,29,33,37,40,45,47,48,49,53,60],$Vh=[1,44],$Vi=[1,42],$Vj=[1,41],$Vk=[1,43],$Vl=[1,45],$Vm=[1,46],$Vn=[1,47],$Vo=[1,48],$Vp=[1,49],$Vq=[1,50],$Vr=[1,51],$Vs=[1,53],$Vt=[1,54],$Vu=[1,55],$Vv=[1,64],$Vw=[1,65],$Vx=[1,66],$Vy=[1,67],$Vz=[1,68],$VA=[1,69],$VB=[1,70],$VC=[1,71],$VD=[1,72],$VE=[1,73],$VF=[1,74],$VG=[1,75],$VH=[1,76],$VI=[1,77],$VJ=[1,78],$VK=[9,35,46,55,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78],$VL=[1,84],$VM=[1,85],$VN=[1,100],$VO=[5,8,9,10,11,24,25,26,27,28,29,33,37,40,45,47,48,49,53,60],$VP=[5,8,9,10,11,24,25,26,27,28,29,33,35,37,40,45,47,48,49,53,60],$VQ=[35,55],$VR=[9,35,46,55,63,64,69,70,71,72,73,74,75,76,78],$VS=[9,35,46,55,63,64,65,66,67,69,70,71,72,73,74,75,76,78],$VT=[9,35,46,55,69,70,71,72,73,74,75,76,78],$VU=[9,35,46,55,75,76,78],$VV=[1,140],$VW=[1,162],$VX=[1,161],$VY=[37,45,47];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"statements":4,"EOF":5,"normal_statement":6,"flow_control_statement":7,"BREAK":8,"SEMICOLON":9,"CONTINUE":10,"RETURN":11,"expression":12,"statement":13,"variable_declaration":14,"variable_assignment":15,"if":16,"switch":17,"while":18,"for":19,"do_while":20,"subroutine_call":21,"subroutine_declaration":22,"type":23,"INT":24,"DOUBLE":25,"STRING":26,"BOOLEAN":27,"CHAR":28,"ID":29,"EQUAL":30,"PLUS_PLUS":31,"MINUS_MINUS":32,"IF":33,"LPAREN":34,"RPAREN":35,"LBRACE":36,"RBRACE":37,"if_chain":38,"ELSE":39,"SWITCH":40,"switch_cases":41,"case_list":42,"default":43,"case":44,"CASE":45,"COLON":46,"DEFAULT":47,"WHILE":48,"FOR":49,"for_init":50,"for_condition":51,"for_update":52,"DO":53,"subroutine_call_params":54,"COMMA":55,"object_subroutine_call":56,"DOT":57,"method_declaration":58,"function_declaration":59,"VOID":60,"subroutine_declaration_params":61,"subroutine_declaration_param":62,"PLUS":63,"MINUS":64,"TIMES":65,"DIVIDE":66,"MOD":67,"POWER":68,"EQUALS":69,"NOT_EQUAL":70,"LESS_THAN":71,"LESS_THAN_OR_EQUAL":72,"GREATER_THAN":73,"GREATER_THAN_OR_EQUAL":74,"AND":75,"OR":76,"NOT":77,"INTERROGATION":78,"INT_LITERAL":79,"DOUBLE_LITERAL":80,"STRING_LITERAL":81,"BOOLEAN_LITERAL":82,"CHAR_LITERAL":83,"TRUE":84,"FALSE":85,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"BREAK",9:"SEMICOLON",10:"CONTINUE",11:"RETURN",24:"INT",25:"DOUBLE",26:"STRING",27:"BOOLEAN",28:"CHAR",29:"ID",30:"EQUAL",31:"PLUS_PLUS",32:"MINUS_MINUS",33:"IF",34:"LPAREN",35:"RPAREN",36:"LBRACE",37:"RBRACE",39:"ELSE",40:"SWITCH",45:"CASE",46:"COLON",47:"DEFAULT",48:"WHILE",49:"FOR",53:"DO",55:"COMMA",57:"DOT",60:"VOID",63:"PLUS",64:"MINUS",65:"TIMES",66:"DIVIDE",67:"MOD",68:"POWER",69:"EQUALS",70:"NOT_EQUAL",71:"LESS_THAN",72:"LESS_THAN_OR_EQUAL",73:"GREATER_THAN",74:"GREATER_THAN_OR_EQUAL",75:"AND",76:"OR",77:"NOT",78:"INTERROGATION",79:"INT_LITERAL",80:"DOUBLE_LITERAL",81:"STRING_LITERAL",82:"BOOLEAN_LITERAL",83:"CHAR_LITERAL",84:"TRUE",85:"FALSE"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[4,1],[7,2],[7,2],[7,2],[7,3],[6,2],[6,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[23,1],[23,1],[23,1],[23,1],[23,1],[14,3],[14,5],[15,4],[15,3],[15,3],[16,7],[16,8],[38,4],[38,2],[17,7],[41,1],[41,2],[41,1],[42,2],[42,1],[44,4],[43,3],[18,7],[19,11],[50,1],[50,1],[51,1],[52,1],[20,9],[21,5],[21,4],[54,3],[54,1],[56,3],[22,1],[22,1],[58,7],[58,8],[59,7],[59,8],[61,3],[61,1],[62,2],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,2],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,2],[12,5],[12,1],[12,2],[12,2],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:$V0,10:$V1,11:$V2,13:6,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,33:$V9,40:$Va,48:$Vb,49:$Vc,53:$Vd,58:26,59:27,60:$Ve},{1:[3]},{5:[1,34]},{1:[2,2]},o($Vf,[2,4],{14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,58:26,59:27,7:35,13:36,8:$V0,10:$V1,11:$V2,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,33:$V9,40:$Va,48:$Vb,49:$Vc,53:$Vd,60:$Ve}),o($Vf,[2,5]),o($Vg,[2,11]),{9:[1,37]},{9:[1,38]},{9:[1,39],12:40,29:$Vh,34:$Vi,64:$Vj,77:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,14]),o($Vg,[2,15]),o($Vg,[2,16]),o($Vg,[2,17]),o($Vg,[2,18]),o($Vg,[2,19]),o($Vg,[2,20]),{29:[1,52]},{30:$Vs,31:$Vt,32:$Vu,34:[1,56]},{34:[1,57]},{34:[1,58]},{34:[1,59]},{34:[1,60]},{36:[1,61]},o($Vg,[2,55]),o($Vg,[2,56]),{29:[2,21]},{29:[2,22]},{29:[2,23]},{29:[2,24]},{29:[2,25]},{29:[1,62]},{1:[2,1]},o($Vf,[2,3]),o($Vg,[2,10]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),{9:[1,63],63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,78:$VJ},{12:79,29:$Vh,34:$Vi,64:$Vj,77:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{12:80,29:$Vh,34:$Vi,64:$Vj,77:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{12:81,29:$Vh,34:$Vi,64:$Vj,77:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},o($VK,[2,82],{31:[1,82],32:[1,83]}),o($VK,[2,85]),o($VK,[2,86]),o($VK,[2,87]),o($VK,[2,88]),o($VK,[2,89]),o($VK,[2,90]),o($VK,[2,91]),{9:$VL,30:$VM,34:[1,86]},{12:87,29:$Vh,34:$Vi,64:$Vj,77:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{9:[1,88]},{9:[1,89]},{12:92,29:$Vh,34:$Vi,35:[1,91],54:90,64:$Vj,77:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{12:93,29:$Vh,34:$Vi,64:$Vj,77:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{12:94,29:$Vh,34:$Vi,64:$Vj,77:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{12:95,29:$Vh,34:$Vi,64:$Vj,77:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{14:97,15:98,23:99,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$VN,50:96},{4:101,6:4,7:5,8:$V0,10:$V1,11:$V2,13:6,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,33:$V9,40:$Va,48:$Vb,49:$Vc,53:$Vd,58:26,59:27,60:$Ve},{34:[1,102]},o($Vf,[2,9]),{12:103,29:$Vh,34:$Vi,64:$Vj,77:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{12:104,29:$Vh,34:$Vi,64:$Vj,77:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{12:105,29:$Vh,34:$Vi,64:$Vj,77:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{12:106,29:$Vh,34:$Vi,64:$Vj,77:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{12:107,29:$Vh,34:$Vi,64:$Vj,77:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{12:108,29:$Vh,34:$Vi,64:$Vj,77:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{12:109,29:$Vh,34:$Vi,64:$Vj,77:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{12:110,29:$Vh,34:$Vi,64:$Vj,77:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{12:111,29:$Vh,34:$Vi,64:$Vj,77:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{12:112,29:$Vh,34:$Vi,64:$Vj,77:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{12:113,29:$Vh,34:$Vi,64:$Vj,77:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{12:114,29:$Vh,34:$Vi,64:$Vj,77:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{12:115,29:$Vh,34:$Vi,64:$Vj,77:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{12:116,29:$Vh,34:$Vi,64:$Vj,77:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{12:117,29:$Vh,34:$Vi,64:$Vj,77:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},o($VK,[2,70]),{35:[1,118],63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,78:$VJ},o($VK,[2,80]),o($VK,[2,83]),o($VK,[2,84]),o($VO,[2,26]),{12:119,29:$Vh,34:$Vi,64:$Vj,77:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{23:123,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,35:[1,120],61:121,62:122},{9:[1,124],63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,78:$VJ},o($VP,[2,29]),o($VP,[2,30]),{35:[1,125],55:[1,126]},{9:[1,127]},o($VQ,[2,53],{63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,78:$VJ}),{35:[1,128],63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,78:$VJ},{35:[1,129],63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,78:$VJ},{35:[1,130],63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,78:$VJ},{9:[1,131]},{9:[2,45]},{9:[2,46]},{29:[1,132]},{30:$Vs,31:$Vt,32:$Vu},{37:[1,133]},{23:123,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,35:[1,134],61:135,62:122},o($VR,[2,64],{65:$Vx,66:$Vy,67:$Vz,68:$VA}),o($VR,[2,65],{65:$Vx,66:$Vy,67:$Vz,68:$VA}),o($VS,[2,66],{68:$VA}),o($VS,[2,67],{68:$VA}),o($VS,[2,68],{68:$VA}),o($VS,[2,69]),o($VT,[2,72],{63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA}),o($VT,[2,73],{63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA}),o($VT,[2,74],{63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA}),o($VT,[2,75],{63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA}),o($VT,[2,76],{63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA}),o($VT,[2,77],{63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA}),o($VU,[2,78],{63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG}),o($VU,[2,79],{63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG}),{46:[1,136],63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,78:$VJ},o($VK,[2,71]),{9:[1,137],63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,78:$VJ},{36:[1,138]},{35:[1,139],55:$VV},o($VQ,[2,62]),{29:[1,141]},o($VP,[2,28]),{9:[1,142]},{12:143,29:$Vh,34:$Vi,64:$Vj,77:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},o($Vg,[2,51]),{36:[1,144]},{36:[1,145]},{36:[1,146]},{12:148,29:$Vh,34:$Vi,51:147,64:$Vj,77:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{9:$VL,30:$VM},{48:[1,149]},{36:[1,150]},{35:[1,151],55:$VV},{12:152,29:$Vh,34:$Vi,64:$Vj,77:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},o($VO,[2,27]),{4:153,6:4,7:5,8:$V0,10:$V1,11:$V2,13:6,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,33:$V9,40:$Va,48:$Vb,49:$Vc,53:$Vd,58:26,59:27,60:$Ve},{36:[1,154]},{23:123,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,62:155},o($VQ,[2,63]),o($Vg,[2,50]),o($VQ,[2,52],{63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,78:$VJ}),{4:156,6:4,7:5,8:$V0,10:$V1,11:$V2,13:6,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,33:$V9,40:$Va,48:$Vb,49:$Vc,53:$Vd,58:26,59:27,60:$Ve},{41:157,42:158,43:159,44:160,45:$VW,47:$VX},{4:163,6:4,7:5,8:$V0,10:$V1,11:$V2,13:6,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,33:$V9,40:$Va,48:$Vb,49:$Vc,53:$Vd,58:26,59:27,60:$Ve},{9:[1,164]},{9:[2,47],63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,78:$VJ},{34:[1,165]},{4:166,6:4,7:5,8:$V0,10:$V1,11:$V2,13:6,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,33:$V9,40:$Va,48:$Vb,49:$Vc,53:$Vd,58:26,59:27,60:$Ve},{36:[1,167]},o([9,35,46,55,78],[2,81],{63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI}),{37:[1,168]},{4:169,6:4,7:5,8:$V0,10:$V1,11:$V2,13:6,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,33:$V9,40:$Va,48:$Vb,49:$Vc,53:$Vd,58:26,59:27,60:$Ve},o($VQ,[2,61]),{37:[1,170]},{37:[1,171]},{37:[2,36],43:172,44:173,45:$VW,47:$VX},{37:[2,38]},o($VY,[2,40]),{46:[1,174]},{12:175,29:$Vh,34:$Vi,64:$Vj,77:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{37:[1,176]},{15:178,29:$VN,52:177},{12:179,29:$Vh,34:$Vi,64:$Vj,77:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{37:[1,180]},{4:181,6:4,7:5,8:$V0,10:$V1,11:$V2,13:6,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,33:$V9,40:$Va,48:$Vb,49:$Vc,53:$Vd,58:26,59:27,60:$Ve},o($Vg,[2,59]),{37:[1,182]},o($Vg,[2,31],{38:183,39:[1,184]}),o($Vg,[2,35]),{37:[2,37]},o($VY,[2,39]),{4:185,6:4,7:5,8:$V0,10:$V1,11:$V2,13:6,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,33:$V9,40:$Va,48:$Vb,49:$Vc,53:$Vd,58:26,59:27,60:$Ve},{46:[1,186],63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,78:$VJ},o($Vg,[2,43]),{35:[1,187]},{35:[2,48]},{35:[1,188],63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,78:$VJ},o($Vg,[2,57]),{37:[1,189]},o($Vg,[2,60]),o($Vg,[2,32]),{16:191,33:$V9,36:[1,190]},{37:[2,42]},{4:192,6:4,7:5,8:$V0,10:$V1,11:$V2,13:6,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,33:$V9,40:$Va,48:$Vb,49:$Vc,53:$Vd,58:26,59:27,60:$Ve},{36:[1,193]},{9:[1,194]},o($Vg,[2,58]),{4:195,6:4,7:5,8:$V0,10:$V1,11:$V2,13:6,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,33:$V9,40:$Va,48:$Vb,49:$Vc,53:$Vd,58:26,59:27,60:$Ve},o($Vg,[2,34]),o($VY,[2,41]),{4:196,6:4,7:5,8:$V0,10:$V1,11:$V2,13:6,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,33:$V9,40:$Va,48:$Vb,49:$Vc,53:$Vd,58:26,59:27,60:$Ve},o($Vg,[2,49]),{37:[1,197]},{37:[1,198]},o($Vg,[2,33]),o($Vg,[2,44])],
defaultActions: {3:[2,2],28:[2,21],29:[2,22],30:[2,23],31:[2,24],32:[2,25],34:[2,1],97:[2,45],98:[2,46],159:[2,38],172:[2,37],178:[2,48],185:[2,42]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip */
break;
case 1:/* skip */
break;
case 2:/* skip */
break;
case 3: yy_.yytext = yy_.yytext.toLowerCase();  return ID; 
break;
case 4: yy_.yytext = yy_.yytext.substring(1, yy_.yytext.length()-2); return "CHAR_LITERAL"; 
break;
case 5: yy_.yytext = yy_.yytext.substring(1, yy_.yytext.length()-2); return "STRING_LITERAL"; 
break;
case 6: return "INT_LITERAL"; 
break;
case 7: return "DOUBLE_LITERAL"; 
break;
case 8: return "INT"; 
break;
case 9: return "DOUBLE"; 
break;
case 10: return "BOOLEAN"; 
break;
case 11: return "CHAR"; 
break;
case 12: return "STRING"; 
break;
case 13: return "PLUS"; 
break;
case 14: return "MINUS"; 
break;
case 15: return "TIMES"; 
break;
case 16: return "DIVIDE"; 
break;
case 17: return "MOD"; 
break;
case 18: return "EQUALS"; 
break;
case 19: return "NOT_EQUAL"; 
break;
case 20: return "LESS_THAN"; 
break;
case 21: return "LESS_THAN_OR_EQUAL"; 
break;
case 22: return "GREATER_THAN"; 
break;
case 23: return "GREATER_THAN_OR_EQUAL"; 
break;
case 24: return "INTERROGATION"; 
break;
case 25: return "COLON"; 
break;
case 26: return "AND"; 
break;
case 27: return "OR;" 
break;
case 28: return "NOT"; 
break;
case 29: return "LPAREN"; 
break;
case 30: return "RPAREN"; 
break;
case 31: return "SEMICOLON"; 
break;
case 32: return "EQUAL"; 
break;
case 33: return "PLUS_PLUS"; 
break;
case 34: return "MINUS_MINUS"; 
break;
case 35: return "LBRACKET"; 
break;
case 36: return "RBRACKET"; 
break;
case 37: return "LBRACE"; 
break;
case 38: return "RBRACE"; 
break;
case 39: return "IF"; 
break;
case 40: return "ELSE"; 
break;
case 41: return "SWITCH"; 
break;
case 42: return "CASE"; 
break;
case 43: return "DEFAULT"; 
break;
case 44: return "WHILE"; 
break;
case 45: return "FOR"; 
break;
case 46: return "DO"; 
break;
case 47: return "VOID"; 
break;
case 48: return "TRUE"; 
break;
case 49: return "FALSE"; 
break;
case 50: return "RETURN"; 
break;
case 51: return "CONTINUE"; 
break;
case 52: return "BREAK"; 
break;
case 53: return "COMMA"; 
break;
case 54: return "DOT"; 
break;
case 55: return "EOF"; 
break;
case 56: return "ERROR"; 
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\s+)/i,/^(?:([a-zA-ZÑñ]|(_[a-zA-ZÑñ]))([a-zA-ZÑñ]|[0-9]|_)*)/i,/^(?:'([^\r\n'\\]|\\[btnfr"'\\]|\\[0-9a-fA-F]{2}|\\u[0-9a-fA-F]{4})')/i,/^(?:"(?:[["\\"]["bnrt/["\\"]|[^"["\\"])*")/i,/^(?:[0-9]+)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:>=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:&&)/i,/^(?:\\\|\\\|)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:=)/i,/^(?:\\\+\\\+)/i,/^(?:\\-\\-)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:void\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:return\b)/i,/^(?:continue\b)/i,/^(?:break\b)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analyzer;
exports.Parser = analyzer.Parser;
exports.parse = function () { return analyzer.parse.apply(analyzer, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}