/* parser generated by jison 0.3.0 */
/**
 * Returns a Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

    import { Builder } from '../ast';
    import { Symbols, SubroutineType, primitiveAsCollection } from '../elements';
    import { VariableAssigmentType } from '../statements/variable';
    import { ArithmeticExpressionType,RelationalExpresionType,LogicalExpressionType } from '../statements/expression';
    import { ReferenceType, InitializerType } from '../statements/value';


import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType, o } from '@ts-jison/parser';const $V0=[2,5],$V1=[1,6],$V2=[1,7],$V3=[1,8],$V4=[1,30],$V5=[1,36],$V6=[1,37],$V7=[1,38],$V8=[1,39],$V9=[1,40],$Va=[1,34],$Vb=[1,33],$Vc=[1,22],$Vd=[1,23],$Ve=[1,24],$Vf=[1,25],$Vg=[1,26],$Vh=[1,35],$Vi=[5,47,58,60],$Vj=[5,8,10,11,25,27,28,29,30,31,33,37,43,47,53,58,60,61,62,66,74],$Vk=[1,57],$Vl=[1,49],$Vm=[1,65],$Vn=[1,48],$Vo=[1,50],$Vp=[1,51],$Vq=[1,52],$Vr=[1,53],$Vs=[1,54],$Vt=[1,55],$Vu=[1,56],$Vv=[1,64],$Vw=[1,75],$Vx=[1,78],$Vy=[1,80],$Vz=[1,83],$VA=[1,81],$VB=[1,82],$VC=[1,84],$VD=[1,85],$VE=[33,35,39,45],$VF=[1,96],$VG=[1,98],$VH=[1,88],$VI=[1,89],$VJ=[1,90],$VK=[1,91],$VL=[1,92],$VM=[1,93],$VN=[1,94],$VO=[1,95],$VP=[1,97],$VQ=[1,99],$VR=[1,100],$VS=[1,101],$VT=[1,102],$VU=[9,36,38,39,45,47,59,69,78,79,80,81,82,83,84,85,86,87,88,89,91],$VV=[1,121],$VW=[2,30],$VX=[1,123],$VY=[9,45],$VZ=[47,69],$V_=[1,169],$V$=[45,69],$V01=[9,36,38,39,45,47,59,69,78,79,84,85,86,87,88,89,91],$V11=[9,36,38,39,45,47,59,69,78,79,80,81,82,84,85,86,87,88,89,91],$V21=[9,36,38,39,45,47,59,69,84,85,86,87,88,89,91],$V31=[9,36,45,47,59,69,88,89,91],$V41=[1,193],$V51=[1,214],$V61=[1,213],$V71=[47,58,60],$V81=[1,252],$V91=[5,8,10,11,25,27,28,29,30,31,33,37,43,47,51,53,58,60,61,62,66,74];

export class AnalyzerParser extends JisonParser implements JisonParserApi {
    $?: any;

    constructor (yy = {}, lexer = new AnalyzerLexer(yy)) {
      super(yy, lexer);
    }

    symbols_: SymbolsType = {"error":2,"program":3,"statements":4,"EOF":5,"normal_statements":6,"flow_control_statement":7,"BREAK":8,"SEMICOLON":9,"CONTINUE":10,"RETURN":11,"expression":12,"statement":13,"variable_declaration":14,"variable_assignment":15,"if":16,"switch":17,"while":18,"for":19,"do_while":20,"subroutine_call":21,"subroutine_declaration":22,"main_declaration":23,"object_subroutine_call":24,"MAIN":25,"type":26,"INT":27,"DOUBLE":28,"STRING":29,"BOOLEAN":30,"CHAR":31,"variable_declaration_aux":32,"ID":33,"EQUAL":34,"LBRACKET":35,"RBRACKET":36,"LIST":37,"LESS_THAN":38,"GREATER_THAN":39,"variable_assignment_aux":40,"PLUS_PLUS":41,"MINUS_MINUS":42,"IF":43,"LPAREN":44,"RPAREN":45,"LBRACE":46,"RBRACE":47,"if_chain":48,"elseif_chain":49,"else":50,"ELSE":51,"elseif":52,"SWITCH":53,"switch_cases":54,"case_list":55,"default":56,"case":57,"CASE":58,"COLON":59,"DEFAULT":60,"WHILE":61,"FOR":62,"for_init":63,"for_condition":64,"for_update":65,"DO":66,"subroutine_call_aux":67,"subroutine_call_params":68,"COMMA":69,"object_subroutine_call_aux":70,"DOT":71,"method_declaration":72,"function_declaration":73,"VOID":74,"subroutine_declaration_params":75,"subroutine_declaration_param":76,"cast":77,"PLUS":78,"MINUS":79,"TIMES":80,"DIVIDE":81,"MOD":82,"POWER":83,"EQUALS":84,"NOT_EQUAL":85,"LESS_THAN_OR_EQUAL":86,"GREATER_THAN_OR_EQUAL":87,"AND":88,"OR":89,"NOT":90,"INTERROGATION":91,"INT_LITERAL":92,"DOUBLE_LITERAL":93,"STRING_LITERAL":94,"CHAR_LITERAL":95,"TRUE":96,"FALSE":97,"initializers":98,"list_initializer":99,"vector_initializer":100,"expression_list":101,"NEW":102,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",5:"EOF",8:"BREAK",9:"SEMICOLON",10:"CONTINUE",11:"RETURN",25:"MAIN",27:"INT",28:"DOUBLE",29:"STRING",30:"BOOLEAN",31:"CHAR",33:"ID",34:"EQUAL",35:"LBRACKET",36:"RBRACKET",37:"LIST",38:"LESS_THAN",39:"GREATER_THAN",41:"PLUS_PLUS",42:"MINUS_MINUS",43:"IF",44:"LPAREN",45:"RPAREN",46:"LBRACE",47:"RBRACE",51:"ELSE",53:"SWITCH",58:"CASE",59:"COLON",60:"DEFAULT",61:"WHILE",62:"FOR",66:"DO",69:"COMMA",71:"DOT",74:"VOID",78:"PLUS",79:"MINUS",80:"TIMES",81:"DIVIDE",82:"MOD",83:"POWER",84:"EQUALS",85:"NOT_EQUAL",86:"LESS_THAN_OR_EQUAL",87:"GREATER_THAN_OR_EQUAL",88:"AND",89:"OR",90:"NOT",91:"INTERROGATION",92:"INT_LITERAL",93:"DOUBLE_LITERAL",94:"STRING_LITERAL",95:"CHAR_LITERAL",96:"TRUE",97:"FALSE",102:"NEW"};
    productions_: ProductionsType = [0,[3,2],[4,2],[4,1],[4,1],[4,0],[7,2],[7,2],[7,2],[7,3],[6,2],[6,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[23,2],[26,1],[26,1],[26,1],[26,1],[26,1],[14,2],[32,2],[32,4],[32,4],[32,6],[32,5],[32,7],[15,2],[40,3],[40,2],[40,2],[40,6],[40,8],[16,7],[16,8],[48,2],[48,1],[48,1],[50,4],[49,2],[49,1],[52,8],[17,7],[54,1],[54,2],[54,1],[55,2],[55,1],[57,4],[56,3],[18,7],[19,11],[63,1],[63,1],[64,1],[65,1],[20,9],[21,2],[67,4],[67,3],[68,3],[68,1],[24,2],[70,3],[22,1],[22,1],[72,7],[72,8],[73,7],[73,8],[75,3],[75,1],[77,4],[76,2],[76,5],[76,4],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,2],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,2],[12,5],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,2],[12,2],[12,4],[12,6],[12,1],[12,1],[12,1],[12,1],[98,1],[98,1],[100,3],[100,5],[99,5],[101,1],[101,3]];
    table: Array<StateType> = [{3:1,4:2,5:$V0,6:3,7:4,8:$V1,10:$V2,11:$V3,13:5,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:$V4,26:32,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:20,33:$Va,37:$Vb,40:21,43:$Vc,53:$Vd,61:$Ve,62:$Vf,66:$Vg,67:27,70:31,72:28,73:29,74:$Vh},{1:[3]},{5:[1,41]},o($Vi,[2,3],{14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,32:20,40:21,67:27,72:28,73:29,70:31,26:32,7:42,13:43,8:$V1,10:$V2,11:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,33:$Va,37:$Vb,43:$Vc,53:$Vd,61:$Ve,62:$Vf,66:$Vg,74:$Vh}),o($Vi,[2,4]),o($Vj,[2,11]),{9:[1,44]},{9:[1,45]},{9:[1,46],12:47,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},o($Vj,[2,12]),o($Vj,[2,13]),o($Vj,[2,14]),o($Vj,[2,15]),o($Vj,[2,16]),o($Vj,[2,17]),o($Vj,[2,18]),o($Vj,[2,19]),o($Vj,[2,20]),o($Vj,[2,21]),o($Vj,[2,22]),{9:[1,66]},{9:[1,67]},{44:[1,68]},{44:[1,69]},{44:[1,70]},{44:[1,71]},{46:[1,72]},{9:[1,73]},o($Vj,[2,73]),o($Vj,[2,74]),{21:74,33:$Vw,67:27},{9:[1,76]},{33:[1,77],35:$Vx},{38:[1,79]},{34:$Vy,35:$Vz,41:$VA,42:$VB,44:$VC,71:$VD},{33:[1,86]},o($VE,[2,24]),o($VE,[2,25]),o($VE,[2,26]),o($VE,[2,27]),o($VE,[2,28]),{1:[2,1]},o($Vi,[2,2]),o($Vj,[2,10]),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),{9:[1,87],38:$VF,39:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,91:$VT},{12:103,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{12:104,26:105,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{12:106,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},o($VU,[2,103]),o($VU,[2,104]),o($VU,[2,105]),o($VU,[2,106]),o($VU,[2,107]),o($VU,[2,108]),o($VU,[2,109],{35:[1,109],41:[1,107],42:[1,108],44:$VC,71:$VD}),o($VU,[2,114]),o($VU,[2,115]),o($VU,[2,116]),o($VU,[2,117]),o($VU,[2,118]),o($VU,[2,119]),{26:111,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,37:[1,110]},{12:113,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,101:112,102:$Vv},o($Vj,[2,29]),o($Vj,[2,36]),{12:114,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{12:115,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{12:116,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{26:120,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:118,33:$VV,37:$Vb,40:119,63:117},{4:122,6:3,7:4,8:$V1,10:$V2,11:$V3,13:5,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:$V4,26:32,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:20,33:$Va,37:$Vb,40:21,43:$Vc,47:$V0,53:$Vd,61:$Ve,62:$Vf,66:$Vg,67:27,70:31,72:28,73:29,74:$Vh},o($Vj,[2,66]),o($Vj,[2,23]),{44:$VC},o($Vj,[2,71]),{9:$VW,34:$VX,44:[1,124]},{36:[1,125]},{26:126,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9},{12:127,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},o($VY,[2,38]),o($VY,[2,39]),{12:128,33:$Vk,35:[1,129],44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{12:132,33:$Vk,44:$Vl,45:[1,131],46:$Vm,67:58,68:130,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{33:$Vw,67:133},{44:[1,134]},o($Vi,[2,9]),{12:135,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{12:136,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{12:137,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{12:138,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{12:139,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{12:140,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{12:141,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{12:142,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{12:143,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{12:144,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{12:145,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{12:146,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{12:147,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{12:148,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{12:149,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},o($VU,[2,91]),{38:$VF,39:$VG,45:[1,150],78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,91:$VT},{45:[1,151]},o($VU,[2,101]),o($VU,[2,110]),o($VU,[2,111]),{12:152,33:$Vk,35:[1,153],44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{38:[1,154]},{35:[1,155]},{47:[1,156],69:[1,157]},o($VZ,[2,123],{38:$VF,39:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,91:$VT}),{38:$VF,39:$VG,45:[1,158],78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,91:$VT},{38:$VF,39:$VG,45:[1,159],78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,91:$VT},{38:$VF,39:$VG,45:[1,160],78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,91:$VT},{9:[1,161]},{9:[2,61]},{9:[2,62]},{33:[1,162],35:$Vx},{34:$Vy,35:$Vz,41:$VA,42:$VB},{47:[1,163]},{12:164,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{26:168,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,37:$V_,45:[1,165],75:166,76:167},{33:[1,170]},{39:[1,171]},o($VY,[2,37],{38:$VF,39:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,91:$VT}),{36:[1,172],38:$VF,39:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,91:$VT},{12:173,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{45:[1,174],69:[1,175]},o($VU,[2,68]),o($V$,[2,70],{38:$VF,39:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,91:$VT}),o($VU,[2,72]),{26:168,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,37:$V_,45:[1,176],75:177,76:167},o($V01,[2,85],{80:$VJ,81:$VK,82:$VL,83:$VM}),o($V01,[2,86],{80:$VJ,81:$VK,82:$VL,83:$VM}),o($V11,[2,87],{83:$VM}),o($V11,[2,88],{83:$VM}),o($V11,[2,89],{83:$VM}),o($V11,[2,90]),o($V21,[2,93],{78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM}),o($V21,[2,94],{78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM}),o($V21,[2,95],{78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM}),o($V21,[2,96],{78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM}),o($V21,[2,97],{78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM}),o($V21,[2,98],{78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM}),o($V31,[2,99],{38:$VF,39:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ}),o($V31,[2,100],{38:$VF,39:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ}),{38:$VF,39:$VG,59:[1,178],78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,91:$VT},o($VU,[2,92]),{12:179,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{36:[1,180],38:$VF,39:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,91:$VT},{12:181,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{26:182,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9},{12:183,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},o($VU,[2,120]),{12:184,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{46:[1,185]},{46:[1,186]},{46:[1,187]},{12:189,33:$Vk,44:$Vl,46:$Vm,64:188,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{9:$VW,34:$VX},{61:[1,190]},{9:[2,31],38:$VF,39:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,91:$VT},{46:[1,191]},{45:[1,192],69:$V41},o($V$,[2,80]),{33:[1,194],35:[1,195]},{38:[1,196]},{9:[2,32],34:[1,197]},{33:[1,198]},{34:[1,199]},{36:[1,200],38:$VF,39:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,91:$VT},o($VU,[2,67]),{12:201,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{46:[1,202]},{45:[1,203],69:$V41},{12:204,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},o($VU,[2,81]),o($VU,[2,112]),{36:[1,205],38:$VF,39:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,91:$VT},{39:[1,206]},{36:[1,207],38:$VF,39:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,91:$VT},o($VZ,[2,124],{38:$VF,39:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,91:$VT}),{4:208,6:3,7:4,8:$V1,10:$V2,11:$V3,13:5,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:$V4,26:32,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:20,33:$Va,37:$Vb,40:21,43:$Vc,47:$V0,53:$Vd,61:$Ve,62:$Vf,66:$Vg,67:27,70:31,72:28,73:29,74:$Vh},{54:209,55:210,56:211,57:212,58:$V51,60:$V61},{4:215,6:3,7:4,8:$V1,10:$V2,11:$V3,13:5,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:$V4,26:32,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:20,33:$Va,37:$Vb,40:21,43:$Vc,47:$V0,53:$Vd,61:$Ve,62:$Vf,66:$Vg,67:27,70:31,72:28,73:29,74:$Vh},{9:[1,216]},{9:[2,63],38:$VF,39:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,91:$VT},{44:[1,217]},{4:218,6:3,7:4,8:$V1,10:$V2,11:$V3,13:5,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:$V4,26:32,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:20,33:$Va,37:$Vb,40:21,43:$Vc,47:$V0,53:$Vd,61:$Ve,62:$Vf,66:$Vg,67:27,70:31,72:28,73:29,74:$Vh},{46:[1,219]},{26:168,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,37:$V_,76:220},o($V$,[2,82]),{36:[1,221]},{26:222,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9},{12:223,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{9:[2,34],34:[1,224]},{12:225,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{36:[1,226]},o($V$,[2,69],{38:$VF,39:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,91:$VT}),{4:227,6:3,7:4,8:$V1,10:$V2,11:$V3,13:5,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:$V4,26:32,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:20,33:$Va,37:$Vb,40:21,43:$Vc,47:$V0,53:$Vd,61:$Ve,62:$Vf,66:$Vg,67:27,70:31,72:28,73:29,74:$Vh},{46:[1,228]},o([9,36,45,47,59,69,91],[2,102],{38:$VF,39:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS}),{36:[1,229]},o($VU,[2,122]),o($VU,[2,121]),{47:[1,230]},{47:[1,231]},{47:[2,52],56:232,57:233,58:$V51,60:$V61},{47:[2,54]},o($V71,[2,56]),{59:[1,234]},{12:235,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{47:[1,236]},{33:$VV,40:238,65:237},{12:239,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{47:[1,240]},{4:241,6:3,7:4,8:$V1,10:$V2,11:$V3,13:5,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:$V4,26:32,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:20,33:$Va,37:$Vb,40:21,43:$Vc,47:$V0,53:$Vd,61:$Ve,62:$Vf,66:$Vg,67:27,70:31,72:28,73:29,74:$Vh},o($V$,[2,79]),{33:[1,242]},{39:[1,243]},{9:[2,33],38:$VF,39:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,91:$VT},{12:244,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},o($VY,[2,40],{38:$VF,39:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,91:$VT}),{34:[1,245]},{47:[1,246]},{4:247,6:3,7:4,8:$V1,10:$V2,11:$V3,13:5,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:$V4,26:32,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:20,33:$Va,37:$Vb,40:21,43:$Vc,47:$V0,53:$Vd,61:$Ve,62:$Vf,66:$Vg,67:27,70:31,72:28,73:29,74:$Vh},o($VU,[2,113]),o($Vj,[2,42],{48:248,49:249,50:250,52:251,51:$V81}),o($Vj,[2,51]),{47:[2,53]},o($V71,[2,55]),{4:253,6:3,7:4,8:$V1,10:$V2,11:$V3,13:5,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:$V4,26:32,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:20,33:$Va,37:$Vb,40:21,43:$Vc,47:$V0,53:$Vd,61:$Ve,62:$Vf,66:$Vg,67:27,70:31,72:28,73:29,74:$Vh},{38:$VF,39:$VG,59:[1,254],78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,91:$VT},o($Vj,[2,59]),{45:[1,255]},{45:[2,64]},{38:$VF,39:$VG,45:[1,256],78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,91:$VT},o($Vj,[2,77]),{47:[1,257]},o($V$,[2,84]),{33:[1,258]},{9:[2,35],38:$VF,39:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,91:$VT},{12:259,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},o($Vj,[2,75]),{47:[1,260]},o($Vj,[2,43]),o($Vj,[2,46],{50:261,52:262,51:$V81}),o($Vj,[2,45]),o($V91,[2,49]),{43:[1,264],46:[1,263]},{47:[2,58]},o($V71,$V0,{6:3,7:4,13:5,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,32:20,40:21,67:27,72:28,73:29,70:31,26:32,4:265,8:$V1,10:$V2,11:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,33:$Va,37:$Vb,43:$Vc,53:$Vd,61:$Ve,62:$Vf,66:$Vg,74:$Vh}),{46:[1,266]},{9:[1,267]},o($Vj,[2,78]),o($V$,[2,83]),o($VY,[2,41],{38:$VF,39:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,91:$VT}),o($Vj,[2,76]),o($Vj,[2,44]),o($V91,[2,48]),{4:268,6:3,7:4,8:$V1,10:$V2,11:$V3,13:5,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:$V4,26:32,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:20,33:$Va,37:$Vb,40:21,43:$Vc,47:$V0,53:$Vd,61:$Ve,62:$Vf,66:$Vg,67:27,70:31,72:28,73:29,74:$Vh},{44:[1,269]},o($V71,[2,57]),{4:270,6:3,7:4,8:$V1,10:$V2,11:$V3,13:5,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:$V4,26:32,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:20,33:$Va,37:$Vb,40:21,43:$Vc,47:$V0,53:$Vd,61:$Ve,62:$Vf,66:$Vg,67:27,70:31,72:28,73:29,74:$Vh},o($Vj,[2,65]),{47:[1,271]},{12:272,33:$Vk,44:$Vl,46:$Vm,67:58,70:59,77:61,79:$Vn,90:$Vo,92:$Vp,93:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:60,99:62,100:63,102:$Vv},{47:[1,273]},o($Vj,[2,47]),{38:$VF,39:$VG,45:[1,274],78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,91:$VT},o($Vj,[2,60]),{46:[1,275]},{4:276,6:3,7:4,8:$V1,10:$V2,11:$V3,13:5,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:$V4,26:32,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:20,33:$Va,37:$Vb,40:21,43:$Vc,47:$V0,53:$Vd,61:$Ve,62:$Vf,66:$Vg,67:27,70:31,72:28,73:29,74:$Vh},{47:[1,277]},o($V91,[2,50])];
    defaultActions: {[key:number]: any} = {41:[2,1],118:[2,61],119:[2,62],211:[2,54],232:[2,53],238:[2,64],253:[2,58]};

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:

                const root =  Builder.node.root({
                    stmts: $$[$0-1]
                });

                this.$ = root;
                return root
            
break;
case 2: case 48: case 53:

                    $$[$0-1].push($$[$0]);
                    this.$ = $$[$0-1];
                
break;
case 3: case 52:

                    this.$ = $$[$0];
                
break;
case 4: case 49: case 54:

                    this.$ = [$$[$0]];
                
break;
case 5:

                    this.$ = [];
                
break;
case 6:

                                this.$ = Builder.node.break({
                                    line: _$[$0-1].first_line,
                                    column: _$[$0-1].first_column
                                });
                            
break;
case 7:

                                this.$ = Builder.node.continue({
                                    line: _$[$0-1].first_line,
                                    column: _$[$0-1].first_column
                                });
                            
break;
case 8:

                                this.$ = Builder.node.return({
                                    line: _$[$0-1].first_line,
                                    column: _$[$0-1].first_column
                                });
                            
break;
case 9:

                                this.$ = Builder.node.return({
                                    line: _$[$0-2].first_line,
                                    column: _$[$0-2].first_column,
                                    value: $$[$0-1]
                                });
                            
break;
case 10:

                            $$[$0-1].push($$[$0]);
                            this.$ = $$[$0-1];
                        
break;
case 11:

                            this.$ = [$$[$0]];
                        
break;
case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 61: case 62: case 63: case 64: case 73: case 74:
 this.$ = $$[$0]; 
break;
case 23:

                        this.$ = Builder.node.main({
                            line: _$[$0-1].first_line,
                            column: _$[$0-1].first_column,
                            call: $$[$0]
                        });
                    
break;
case 24:
 this.$ = Symbols.INT; 
break;
case 25:
 this.$ = Symbols.DOUBLE; 
break;
case 26:
 this.$ = Symbols.STRING; 
break;
case 27:
 this.$ = Symbols.BOOLEAN; 
break;
case 28:
 this.$ = Symbols.CHAR; 
break;
case 29: case 36:

                            this.$ = $$[$0-1];
                        
break;
case 30:

                            this.$ = Builder.node.variableDcl({
                                line: _$[$0-1].first_line,
                                column: _$[$0-1].first_column,
                                variable: Builder.element.primitive({
                                    type: $$[$0-1],
                                    name: $$[$0]
                                }),
                            });
                        
break;
case 31:

                            this.$ = Builder.node.variableDcl({
                                line: _$[$0-3].first_line,
                                column: _$[$0-3].first_column,
                                variable: Builder.element.primitive({
                                    type: $$[$0-3],
                                    name: $$[$0-2],
                                }),
                                value: $$[$0]
                            });
                        
break;
case 32:

                            this.$ = Builder.node.variableDcl({
                                line: _$[$0-3].first_line,
                                column: _$[$0-3].first_column,
                                variable: Builder.element.vector({
                                    primitive: $$[$0-3],
                                    name: $$[$0]
                                }),
                            });
                        
break;
case 33:

                            this.$ = Builder.node.variableDcl({
                                line: _$[$0-5].first_line,
                                column: _$[$0-5].first_column,
                                variable: Builder.element.vector({
                                    primitive: $$[$0-5],
                                    name: $$[$0-2]
                                }),
                                value: $$[$0]
                            });
                        
break;
case 34:

                            this.$ = Builder.node.variableDcl({
                                line: _$[$0-4].first_line,
                                column: _$[$0-4].first_column,
                                variable: Builder.element.list({
                                    primitive: $$[$0-2],
                                    name: $$[$0]
                                }),
                            });
                        
break;
case 35:

                            this.$ = Builder.node.variableDcl({
                                line: _$[$0-6].first_line,
                                column: _$[$0-6].first_column,
                                variable: Builder.element.list({
                                    primitive: $$[$0-4],
                                    name: $$[$0-2]
                                }),
                                value: $$[$0]
                            });
                        
break;
case 37:

                            this.$ = Builder.node.variableAss({
                                line: _$[$0-2].first_line,
                                column: _$[$0-2].first_column,
                                value: $$[$0],
                                type: VariableAssigmentType.DIRECT, 
                                reference:{
                                    name: $$[$0-2]
                                }
                            });
                        
break;
case 38:

                            this.$ = Builder.node.variableAss({
                                line: _$[$0-1].first_line,
                                column: _$[$0-1].first_column,
                                type: VariableAssigmentType.INCREMENT,
                                reference:{
                                    name: $$[$0-1]
                                }
                            });
                        
break;
case 39:

                            this.$ = Builder.node.variableAss({
                                line: _$[$0-1].first_line,
                                column: _$[$0-1].first_column,
                                type: VariableAssigmentType.DECREMENT,
                                reference:{
                                    name: $$[$0-1]
                                }
                            });
                        
break;
case 40:

                            this.$ = Builder.node.variableAss({
                                line: _$[$0-5].first_line,
                                column: _$[$0-5].first_column,
                                value: $$[$0],
                                type: VariableAssigmentType.INDEXED,
                                reference:{
                                    name: $$[$0-5],
                                    index: $$[$0-3],
                                    indexType: 'vector'
                                }
                            });
                        
break;
case 41:

                            this.$ = Builder.node.variableAss({
                                line: _$[$0-7].first_line,
                                column: _$[$0-7].first_column,
                                value: $$[$0],
                                type: VariableAssigmentType.INDEXED,
                                reference:{
                                    name: $$[$0-7],
                                    index: $$[$0-4],
                                    indexType: 'list'
                                }
                            });
                        
break;
case 42:

            this.$ = Builder.node.if({
                line: _$[$0-6].first_line,
                column: _$[$0-6].first_column,
                condition: $$[$0-4],
                statements: $$[$0-1],
                chain: []
            });
        
break;
case 43:

            this.$ = Builder.node.if({
                line: _$[$0-7].first_line,
                column: _$[$0-7].first_column,
                condition: $$[$0-5],
                statements: $$[$0-2],
                chain: $$[$0]
            });
        
break;
case 44:

                this.$ = $$[$0-1];
                this.$.push($$[$0]);
            
break;
case 45: case 56:

                this.$ = [$$[$0]];
            
break;
case 46:

                this.$ = $$[$0];
            
break;
case 47:

            this.$ = Builder.node.else({
                line: _$[$0-3].first_line,
                column: _$[$0-3].first_column,
                statements: $$[$0-1]
            });
        
break;
case 50:

                this.$ = Builder.node.elseIf({
                    line: _$[$0-7].first_line,
                    column: _$[$0-7].first_column,
                    condition: $$[$0-4],
                    statements: $$[$0-1]
                });
            
break;
case 51:

                this.$ = Builder.node.switch({
                    line: _$[$0-6].first_line,
                    column: _$[$0-6].first_column,
                    value: $$[$0-4],
                    cases: $$[$0-1]
                });
            
break;
case 55:

                $$[$0-1].push($$[$0]);
                this.$ = $$[$0-1];
            
break;
case 57:

            this.$ = Builder.node.case({
                line: _$[$0-3].first_line,
                column: _$[$0-3].first_column,
                condition: $$[$0-2],
                statements: $$[$0]
            });
        
break;
case 58:

                this.$ = Builder.node.default({
                    line: _$[$0-2].first_line,
                    column: _$[$0-2].first_column,
                    statements: $$[$0]
                });
            
break;
case 59:

            this.$ = Builder.node.while({
                line: _$[$0-6].first_line,
                column: _$[$0-6].first_column,
                condition: $$[$0-4],
                statements: $$[$0-1]
            });
        
break;
case 60:

            this.$ = Builder.node.for({
                line: _$[$0-10].first_line,
                column: _$[$0-10].first_column,
                init: $$[$0-8],
                condition: $$[$0-6],
                update: $$[$0-4],
                statements: $$[$0-1]
            });
        
break;
case 65:

                this.$ = Builder.node.doWhile({
                    line: _$[$0-8].first_line,
                    column: _$[$0-8].first_column,
                    condition: $$[$0-2],
                    statements: $$[$0-6]
                });
            
break;
case 66: case 71:
 this.$ = $$[$0-1]; 
break;
case 67:

                            this.$ = Builder.node.subroutineCall({
                                line: _$[$0-3].first_line,
                                column: _$[$0-3].first_column,
                                name: $$[$0-3],
                                args: $$[$0-1]
                            });
                        
break;
case 68:

                            this.$ = Builder.node.subroutineCall({
                                line: _$[$0-2].first_line,
                                column: _$[$0-2].first_column,
                                name: $$[$0-2],
                                args: []
                            });
                        
break;
case 69:

                                $$[$0-2].push($$[$0]);
                                this.$ = $$[$0-2];
                            
break;
case 70:

                                this.$ = [$$[$0]];
                            
break;
case 72:

                            this.$ = Builder.node.objectSubroutineCall({
                                line: _$[$0-2].first_line,
                                column: _$[$0-2].first_column,
                                objectName: $$[$0-2],
                                call: $$[$0]
                            });
                        
break;
case 75:

                            this.$ = Builder.node.subroutineDcl({
                                line: _$[$0-6].first_line,
                                column: _$[$0-6].first_column,
                                name: $$[$0-5],
                                args: [],
                                statements: $$[$0-1],
                                type: SubroutineType.METHOD,
                                returnType: Symbols.VOID
                            });
                        
break;
case 76:

                            this.$ = Builder.node.subroutineDcl({
                                line: _$[$0-7].first_line,
                                column: _$[$0-7].first_column,
                                name: $$[$0-6],
                                args: $$[$0-4],
                                statements: $$[$0-1],
                                type: SubroutineType.METHOD,
                                returnType: Symbols.VOID
                            });
                        
break;
case 77:

                            this.$ = Builder.node.subroutineDcl({
                                line: _$[$0-6].first_line,
                                column: _$[$0-6].first_column,
                                name: $$[$0-5],
                                args: [],
                                statements: $$[$0-1],
                                type: SubroutineType.FUNCTION,
                                returnType: $$[$0-6]
                            });
                        
break;
case 78:

                            this.$ = Builder.node.subroutineDcl({
                                line: _$[$0-7].first_line,
                                column: _$[$0-7].first_column,
                                name: $$[$0-6],
                                args: $$[$0-4],
                                statements: $$[$0-1],
                                type: SubroutineType.FUNCTION,
                                returnType: $$[$0-7]
                            });
                        
break;
case 79:

                                    $$[$0-2].push($$[$0]);
                                    this.$ = $$[$0-2];
                                
break;
case 80:

                                    this.$ = [$$[$0]];
                                
break;
case 81:

            this.$ = Builder.node.cast({
                line: _$[$0-3].first_line,
                column: _$[$0-3].first_column,
                type: $$[$0-2],
                value: $$[$0]
            });
        
break;
case 82:

                                    this.$ = Builder.node.argument({
                                        line: _$[$0-1].first_line,
                                        column: _$[$0-1].first_column,
                                        type: [$$[$0-1]],
                                        name: $$[$0]
                                    });
                                
break;
case 83:

                                    this.$ = Builder.node.argument({
                                        line: _$[$0-4].first_line,
                                        column: _$[$0-4].first_column,
                                        type: [primitiveAsCollection($$[$0-2], 'list')],
                                        name: $$[$0]
                                    });
                                
break;
case 84:

                                    this.$ = Builder.node.argument({
                                        line: _$[$0-3].first_line,
                                        column: _$[$0-3].first_column,
                                        type: [primitiveAsCollection($$[$0-3], 'vector')],
                                        name: $$[$0]
                                    });
                                
break;
case 85:

                    this.$ = Builder.node.arithmeticExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: ArithmeticExpressionType.PLUS,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 86:

                    this.$ = Builder.node.arithmeticExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: ArithmeticExpressionType.MINUS,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 87:

                    this.$ = Builder.node.arithmeticExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: ArithmeticExpressionType.TIMES,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 88:

                    this.$ = Builder.node.arithmeticExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: ArithmeticExpressionType.DIVIDE,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 89:

                    this.$ = Builder.node.arithmeticExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: ArithmeticExpressionType.MOD,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 90:

                    this.$ = Builder.node.arithmeticExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: ArithmeticExpressionType.POWER,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 91:

                    this.$ = Builder.node.unaryMinusExp({
                        line: _$[$0-1].first_line,
                        column: _$[$0-1].first_column,
                        operand: $$[$0]
                    });
                
break;
case 92:

                    this.$ = $$[$0-1];
                
break;
case 93:

                    this.$ = Builder.node.relationalExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: RelationalExpresionType.EQUALS,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 94:

                    this.$ = Builder.node.relationalExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: RelationalExpresionType.NOT_EQUAL,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 95:

                    this.$ = Builder.node.relationalExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: RelationalExpresionType.LESS_THAN,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 96:

                    this.$ = Builder.node.relationalExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: RelationalExpresionType.LESS_THAN_OR_EQUAL,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 97:

                    this.$ = Builder.node.relationalExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: RelationalExpresionType.GREATER_THAN,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 98:

                    this.$ = Builder.node.relationalExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: RelationalExpresionType.GREATER_THAN_OR_EQUAL,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 99:

                    this.$ = Builder.node.logicalExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: LogicalExpressionType.AND,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 100:

                    this.$ = Builder.node.logicalExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: LogicalExpressionType.OR,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 101:

                    this.$ = Builder.node.unaryNotExp({
                        line: _$[$0-1].first_line,
                       column: _$[$0-1].first_column,
                        operand: $$[$0]
                    });
                
break;
case 102:

                    this.$ = Builder.node.ternaryExp({
                        line: _$[$0-4].first_line,
                        column: _$[$0-4].first_column,
                        condition: $$[$0-4],
                        trueExpression: $$[$0-2],
                        falseExpression: $$[$0]
                    });
                
break;
case 103:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0].first_line,
                        column: _$[$0].first_column,
                        value: Builder.node.literal({
                            line: _$[$0].first_line,
                            column: _$[$0].first_column,
                            type: Symbols.INT,
                            value: Number($$[$0])
                        })
                    });
                
break;
case 104:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0].first_line,
                        column: _$[$0].first_column,
                        value: Builder.node.literal({
                            line: _$[$0].first_line,
                            column: _$[$0].first_column,
                            type: Symbols.DOUBLE,
                            value: Number($$[$0])
                        })
                    });
                
break;
case 105:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0].first_line,
                        column: _$[$0].first_column,
                        value: Builder.node.literal({
                            line: _$[$0].first_line,
                            column: _$[$0].first_column,
                            type: Symbols.STRING,
                            value: $$[$0]
                        })
                    });
                
break;
case 106:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0].first_line,
                        column: _$[$0].first_column,
                        value: Builder.node.literal({
                            line: _$[$0].first_line,
                            column: _$[$0].first_column,
                            type: Symbols.CHAR,
                            value: $$[$0]
                        })
                    });
                
break;
case 107:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0].first_line,
                        column: _$[$0].first_column,
                        value: Builder.node.literal({
                            line: _$[$0].first_line,
                            column: _$[$0].first_column,
                            type: Symbols.BOOLEAN,
                            value: true
                        })
                    });
                
break;
case 108:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0].first_line,
                        column: _$[$0].first_column,
                        value: Builder.node.literal({
                            line: _$[$0].first_line,
                            column: _$[$0].first_column,
                            type: Symbols.BOOLEAN,
                            value: false
                        })
                    });
                
break;
case 109:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0].first_line,
                        column: _$[$0].first_column,
                        value: Builder.node.reference({
                            line: _$[$0].first_line,
                            column: _$[$0].first_column,
                            name: $$[$0],
                            type: ReferenceType.DIRECT
                        })
                    });
                
break;
case 110:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0-1].first_line,
                        column: _$[$0-1].first_column,
                        value: Builder.node.reference({
                            line: _$[$0-1].first_line,
                            column: _$[$0-1].first_column,
                            name: $$[$0-1],
                            type: ReferenceType.INCREMENT
                        })
                    });
                
break;
case 111:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0-1].first_line,
                        column: _$[$0-1].first_column,
                        value: Builder.node.reference({
                            line: _$[$0-1].first_line,
                            column: _$[$0-1].first_column,
                            name: $$[$0-1],
                            type: ReferenceType.DECREMENT
                        })
                    });
                
break;
case 112:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0-3].first_line,
                        column: _$[$0-3].first_column,
                        value: Builder.node.reference({
                            line: _$[$0-3].first_line,
                            column: _$[$0-3].first_column,
                            name: $$[$0-3],
                            type: ReferenceType.INDEXED,
                            index: $$[$0-1],
                            indexType: 'vector'
                        })
                    });
                
break;
case 113:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0-5].first_line,
                        column: _$[$0-5].first_column,
                        value: Builder.node.reference({
                            line: _$[$0-5].first_line,
                            column: _$[$0-5].first_column,
                            name: $$[$0-5],
                            type: ReferenceType.INDEXED,
                            index: $$[$0-2],
                            indexType: 'list'
                        })
                    });
                
break;
case 114: case 115:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0].first_line,
                        column: _$[$0].first_column,
                        value: Builder.node.call({
                            line: _$[$0].first_line,
                            column: _$[$0].first_column,
                            call: $$[$0]
                        })
                    });
                
break;
case 116: case 117:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0].first_line,
                        column: _$[$0].first_column,
                        value: $$[$0]
                    });
                
break;
case 120:

                            this.$ = Builder.node.initializer({
                                line: _$[$0-2].first_line,
                                column: _$[$0-2].first_column,
                                objectType: InitializerType.VECTOR,
                                initializer:{
                                    values: $$[$0-1]
                                }
                            });
                        
break;
case 121:

                            this.$ = Builder.node.initializer({
                                line: _$[$0-4].first_line,
                                column: _$[$0-4].first_column,
                                objectType: InitializerType.VECTOR,
                                initializer:{
                                    primitive: $$[$0-3],
                                    reserve: $$[$0-1]
                                }
                            });
                        
break;
case 122:

                        this.$ = Builder.node.initializer({
                            line: _$[$0-4].first_line,
                            column: _$[$0-4].first_column,
                            objectType: InitializerType.LIST,
                            initializer:{
                                primitive: $$[$0-1]
                            }
                        });
                    
break;
case 123:
 this.$ = [$$[$0]] 
break;
case 124:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
        }
    }
}


/* generated by ts-jison-lex 0.3.0 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';
export class AnalyzerLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"case-insensitive":true,"moduleName":"Analyzer"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\s+)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?::)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:=)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:void\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:main\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:return\b)/i,/^(?:continue\b)/i,/^(?:break\b)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:([a-zA-ZÑñ]|(_[a-zA-ZÑñ]))([a-zA-ZÑñ]|[0-9]|_)*)/i,/^(?:'([^\r\n'\\]|\\[btnfr"'\\]|\\[0-9a-fA-F]{2}|\\u[0-9a-fA-F]{4})')/i,/^(?:"([^\"\\]|\\.)*")/i,/^(?:[0-9]+(\.[0-9]+))/i,/^(?:[0-9]+)/i,/^(?:$)/i,/^(?:.)/i];
    conditions: any = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0:/* skip */
      break;
    case 1:/* skip */
      break;
    case 2:/* skip */
      break;
    case 3: return "INT"; 
      break;
    case 4: return "DOUBLE"; 
      break;
    case 5: return "BOOLEAN"; 
      break;
    case 6: return "CHAR"; 
      break;
    case 7: return "STRING"; 
      break;
    case 8: return "PLUS_PLUS"; 
      break;
    case 9: return "MINUS_MINUS"; 
      break;
    case 10: return "PLUS"; 
      break;
    case 11: return "MINUS"; 
      break;
    case 12: return "TIMES"; 
      break;
    case 13: return "DIVIDE"; 
      break;
    case 14: return "MOD"; 
      break;
    case 15: return "EQUALS"; 
      break;
    case 16: return "NOT_EQUAL"; 
      break;
    case 17: return "LESS_THAN_OR_EQUAL"; 
      break;
    case 18: return "GREATER_THAN_OR_EQUAL"; 
      break;
    case 19: return "LESS_THAN"; 
      break;
    case 20: return "GREATER_THAN"; 
      break;
    case 21: return "INTERROGATION"; 
      break;
    case 22: return "COLON"; 
      break;
    case 23: return "AND"; 
      break;
    case 24: return "OR" 
      break;
    case 25: return "NOT"; 
      break;
    case 26: return "LPAREN"; 
      break;
    case 27: return "RPAREN"; 
      break;
    case 28: return "SEMICOLON"; 
      break;
    case 29: return "EQUAL"; 
      break;
    case 30: return "LBRACKET"; 
      break;
    case 31: return "RBRACKET"; 
      break;
    case 32: return "LBRACE"; 
      break;
    case 33: return "RBRACE"; 
      break;
    case 34: return "IF"; 
      break;
    case 35: return "ELSE"; 
      break;
    case 36: return "SWITCH"; 
      break;
    case 37: return "CASE"; 
      break;
    case 38: return "DEFAULT"; 
      break;
    case 39: return "WHILE"; 
      break;
    case 40: return "FOR"; 
      break;
    case 41: return "DO"; 
      break;
    case 42: return "VOID"; 
      break;
    case 43: return "TRUE"; 
      break;
    case 44: return "FALSE"; 
      break;
    case 45: return "MAIN"; 
      break;
    case 46: return "NEW"; 
      break;
    case 47: return "LIST"; 
      break;
    case 48: return "RETURN"; 
      break;
    case 49: return "CONTINUE"; 
      break;
    case 50: return "BREAK"; 
      break;
    case 51: return "COMMA"; 
      break;
    case 52: return "DOT"; 
      break;
    case 53: yy_.yytext = yy_.yytext.toLowerCase();  return "ID"; 
      break;
    case 54: yy_.yytext = yy_.yytext.substring(1, yy_.yyleng-1)  
                                                                                        .replace(/\\n/g, '\n')
                                                                                        .replace(/\\\\/g, '\\')
                                                                                        .replace(/\\"/g, '"')
                                                                                        .replace(/\\t/g, '\t')
                                                                                        .replace(/\\\'/g, '\''); return "CHAR_LITERAL"; 
      break;
    case 55: yy_.yytext = yy_.yytext.substring(1, yy_.yyleng-1)  
                                                                                        .replace(/\\n/g, '\n')
                                                                                        .replace(/\\\\/g, '\\')
                                                                                        .replace(/\\"/g, '"')
                                                                                        .replace(/\\t/g, '\t')
                                                                                        .replace(/\\\'/g, '\''); return "STRING_LITERAL"; 
      break;
    case 56: return "DOUBLE_LITERAL"; 
      break;
    case 57: return "INT_LITERAL"; 
      break;
    case 58: return "EOF"; 
      break;
    case 59: 
                                        Builder.ast.context.errorTable.addError({
                                            type: "Lexico",
                                            message: `No se reconoció el token: ${yy_.yytext}`,
                                            line: yy_.yylineno+1,
                                            column:  yy_.yylloc.last_column+1
                                        });
                                        return "UNEXPECTED_TOKEN"; 
                                    
      break;
        }
    }
}

