/* parser generated by jison 0.3.0 */
/**
 * Returns a Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

    import { Builder } from '../ast';
    import { Symbols, SubroutineType } from '../elements';
    import { VariableAssigmentType } from '../statements/variable';
    import { ArithmeticExpressionType,RelationalExpresionType,LogicalExpressionType } from '../statements/expression';
    import { ReferenceType, InitializerType } from '../statements/value';


import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType, o } from '@ts-jison/parser';const $V0=[2,5],$V1=[1,6],$V2=[1,7],$V3=[1,8],$V4=[1,31],$V5=[1,33],$V6=[1,34],$V7=[1,35],$V8=[1,36],$V9=[1,37],$Va=[1,22],$Vb=[1,21],$Vc=[1,23],$Vd=[1,24],$Ve=[1,25],$Vf=[1,26],$Vg=[1,27],$Vh=[1,38],$Vi=[5,45,56,58],$Vj=[5,8,10,11,25,27,28,29,30,31,32,36,41,45,51,56,58,59,60,64,72],$Vk=[1,55],$Vl=[1,47],$Vm=[1,63],$Vn=[1,46],$Vo=[1,48],$Vp=[1,49],$Vq=[1,50],$Vr=[1,51],$Vs=[1,52],$Vt=[1,53],$Vu=[1,54],$Vv=[1,62],$Vw=[1,65],$Vx=[1,67],$Vy=[1,70],$Vz=[1,68],$VA=[1,69],$VB=[1,71],$VC=[1,72],$VD=[1,80],$VE=[32,34,38,43],$VF=[1,92],$VG=[1,94],$VH=[1,84],$VI=[1,85],$VJ=[1,86],$VK=[1,87],$VL=[1,88],$VM=[1,89],$VN=[1,90],$VO=[1,91],$VP=[1,93],$VQ=[1,95],$VR=[1,96],$VS=[1,97],$VT=[1,98],$VU=[9,35,37,38,43,45,57,67,76,77,78,79,80,81,82,83,84,85,86,87,89],$VV=[1,110],$VW=[1,111],$VX=[1,131],$VY=[45,67],$VZ=[5,8,9,10,11,25,27,28,29,30,31,32,36,41,45,51,56,58,59,60,64,72],$V_=[5,8,9,10,11,25,27,28,29,30,31,32,36,41,43,45,51,56,58,59,60,64,72],$V$=[43,67],$V01=[9,35,37,38,43,45,57,67,76,77,82,83,84,85,86,87,89],$V11=[9,35,37,38,43,45,57,67,76,77,78,79,80,82,83,84,85,86,87,89],$V21=[9,35,37,38,43,45,57,67,82,83,84,85,86,87,89],$V31=[9,35,43,45,57,67,86,87,89],$V41=[1,187],$V51=[1,221],$V61=[1,220],$V71=[45,56,58],$V81=[1,253];

export class AnalyzerParser extends JisonParser implements JisonParserApi {
    $?: any;

    constructor (yy = {}, lexer = new AnalyzerLexer(yy)) {
      super(yy, lexer);
    }

    symbols_: SymbolsType = {"error":2,"program":3,"statements":4,"EOF":5,"normal_statements":6,"flow_control_statement":7,"BREAK":8,"SEMICOLON":9,"CONTINUE":10,"RETURN":11,"expression":12,"statement":13,"variable_declaration":14,"variable_assignment":15,"if":16,"switch":17,"while":18,"for":19,"do_while":20,"subroutine_call":21,"subroutine_declaration":22,"main_declaration":23,"object_subroutine_call":24,"MAIN":25,"type":26,"INT":27,"DOUBLE":28,"STRING":29,"BOOLEAN":30,"CHAR":31,"ID":32,"EQUAL":33,"LBRACKET":34,"RBRACKET":35,"LIST":36,"LESS_THAN":37,"GREATER_THAN":38,"PLUS_PLUS":39,"MINUS_MINUS":40,"IF":41,"LPAREN":42,"RPAREN":43,"LBRACE":44,"RBRACE":45,"if_chain":46,"elseif_chain":47,"else":48,"ELSE":49,"elseif":50,"SWITCH":51,"switch_cases":52,"case_list":53,"default":54,"case":55,"CASE":56,"COLON":57,"DEFAULT":58,"WHILE":59,"FOR":60,"for_init":61,"for_condition":62,"for_update":63,"DO":64,"subroutine_call_aux":65,"subroutine_call_params":66,"COMMA":67,"object_subroutine_call_aux":68,"DOT":69,"method_declaration":70,"function_declaration":71,"VOID":72,"subroutine_declaration_params":73,"subroutine_declaration_param":74,"cast":75,"PLUS":76,"MINUS":77,"TIMES":78,"DIVIDE":79,"MOD":80,"POWER":81,"EQUALS":82,"NOT_EQUAL":83,"LESS_THAN_OR_EQUAL":84,"GREATER_THAN_OR_EQUAL":85,"AND":86,"OR":87,"NOT":88,"INTERROGATION":89,"INT_LITERAL":90,"DOUBLE_LITERAL":91,"STRING_LITERAL":92,"CHAR_LITERAL":93,"TRUE":94,"FALSE":95,"initializers":96,"list_initializer":97,"vector_initializer":98,"expression_list":99,"NEW":100,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",5:"EOF",8:"BREAK",9:"SEMICOLON",10:"CONTINUE",11:"RETURN",25:"MAIN",27:"INT",28:"DOUBLE",29:"STRING",30:"BOOLEAN",31:"CHAR",32:"ID",33:"EQUAL",34:"LBRACKET",35:"RBRACKET",36:"LIST",37:"LESS_THAN",38:"GREATER_THAN",39:"PLUS_PLUS",40:"MINUS_MINUS",41:"IF",42:"LPAREN",43:"RPAREN",44:"LBRACE",45:"RBRACE",49:"ELSE",51:"SWITCH",56:"CASE",57:"COLON",58:"DEFAULT",59:"WHILE",60:"FOR",64:"DO",67:"COMMA",69:"DOT",72:"VOID",76:"PLUS",77:"MINUS",78:"TIMES",79:"DIVIDE",80:"MOD",81:"POWER",82:"EQUALS",83:"NOT_EQUAL",84:"LESS_THAN_OR_EQUAL",85:"GREATER_THAN_OR_EQUAL",86:"AND",87:"OR",88:"NOT",89:"INTERROGATION",90:"INT_LITERAL",91:"DOUBLE_LITERAL",92:"STRING_LITERAL",93:"CHAR_LITERAL",94:"TRUE",95:"FALSE",100:"NEW"};
    productions_: ProductionsType = [0,[3,2],[4,2],[4,1],[4,1],[4,0],[7,2],[7,2],[7,2],[7,3],[6,2],[6,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[23,2],[26,1],[26,1],[26,1],[26,1],[26,1],[14,3],[14,5],[14,5],[14,7],[14,6],[14,8],[15,4],[15,3],[15,3],[15,7],[15,9],[16,7],[16,8],[46,2],[46,1],[48,4],[47,2],[47,1],[50,8],[17,7],[52,1],[52,2],[52,1],[53,2],[53,1],[55,4],[54,3],[18,7],[19,11],[61,1],[61,1],[62,1],[63,1],[20,9],[21,2],[65,4],[65,3],[66,3],[66,1],[24,2],[68,3],[22,1],[22,1],[70,7],[70,8],[71,7],[71,8],[73,3],[73,1],[75,4],[74,2],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,2],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,2],[12,5],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,2],[12,2],[12,4],[12,6],[12,1],[12,1],[12,1],[12,1],[96,1],[96,1],[98,3],[98,5],[97,5],[99,1],[99,3]];
    table: Array<StateType> = [{3:1,4:2,5:$V0,6:3,7:4,8:$V1,10:$V2,11:$V3,13:5,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:$V4,26:20,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,36:$Vb,41:$Vc,51:$Vd,59:$Ve,60:$Vf,64:$Vg,65:28,68:32,70:29,71:30,72:$Vh},{1:[3]},{5:[1,39]},o($Vi,[2,3],{14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,26:20,65:28,70:29,71:30,68:32,7:40,13:41,8:$V1,10:$V2,11:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,36:$Vb,41:$Vc,51:$Vd,59:$Ve,60:$Vf,64:$Vg,72:$Vh}),o($Vi,[2,4]),o($Vj,[2,11]),{9:[1,42]},{9:[1,43]},{9:[1,44],12:45,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},o($Vj,[2,12]),o($Vj,[2,13]),o($Vj,[2,14]),o($Vj,[2,15]),o($Vj,[2,16]),o($Vj,[2,17]),o($Vj,[2,18]),o($Vj,[2,19]),o($Vj,[2,20]),o($Vj,[2,21]),o($Vj,[2,22]),{32:[1,64],34:$Vw},{37:[1,66]},{33:$Vx,34:$Vy,39:$Vz,40:$VA,42:$VB,69:$VC},{42:[1,73]},{42:[1,74]},{42:[1,75]},{42:[1,76]},{44:[1,77]},{9:[1,78]},o($Vj,[2,70]),o($Vj,[2,71]),{21:79,32:$VD,65:28},{9:[1,81]},o($VE,[2,24]),o($VE,[2,25]),o($VE,[2,26]),o($VE,[2,27]),o($VE,[2,28]),{32:[1,82]},{1:[2,1]},o($Vi,[2,2]),o($Vj,[2,10]),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),{9:[1,83],37:$VF,38:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,89:$VT},{12:99,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{12:100,26:101,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{12:102,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},o($VU,[2,98]),o($VU,[2,99]),o($VU,[2,100]),o($VU,[2,101]),o($VU,[2,102]),o($VU,[2,103]),o($VU,[2,104],{34:[1,105],39:[1,103],40:[1,104],42:$VB,69:$VC}),o($VU,[2,109]),o($VU,[2,110]),o($VU,[2,111]),o($VU,[2,112]),o($VU,[2,113]),o($VU,[2,114]),{26:107,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,36:[1,106]},{12:109,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,99:108,100:$Vv},{9:$VV,33:$VW,42:[1,112]},{35:[1,113]},{26:114,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9},{12:115,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{9:[1,116]},{9:[1,117]},{12:118,32:$Vk,34:[1,119],42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{12:122,32:$Vk,42:$Vl,43:[1,121],44:$Vm,65:56,66:120,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{32:$VD,65:123},{12:124,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{12:125,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{12:126,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{14:128,15:129,26:130,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$VX,36:$Vb,61:127},{4:132,6:3,7:4,8:$V1,10:$V2,11:$V3,13:5,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:$V4,26:20,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,36:$Vb,41:$Vc,45:$V0,51:$Vd,59:$Ve,60:$Vf,64:$Vg,65:28,68:32,70:29,71:30,72:$Vh},o($Vj,[2,63]),o($Vj,[2,23]),{42:$VB},o($Vj,[2,68]),{42:[1,133]},o($Vi,[2,9]),{12:134,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{12:135,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{12:136,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{12:137,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{12:138,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{12:139,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{12:140,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{12:141,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{12:142,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{12:143,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{12:144,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{12:145,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{12:146,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{12:147,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{12:148,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},o($VU,[2,86]),{37:$VF,38:$VG,43:[1,149],76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,89:$VT},{43:[1,150]},o($VU,[2,96]),o($VU,[2,105]),o($VU,[2,106]),{12:151,32:$Vk,34:[1,152],42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{37:[1,153]},{34:[1,154]},{45:[1,155],67:[1,156]},o($VY,[2,118],{37:$VF,38:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,89:$VT}),o($VZ,[2,29]),{12:157,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{26:161,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,43:[1,158],73:159,74:160},{32:[1,162]},{38:[1,163]},{9:[1,164],37:$VF,38:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,89:$VT},o($V_,[2,36]),o($V_,[2,37]),{35:[1,165],37:$VF,38:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,89:$VT},{12:166,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{43:[1,167],67:[1,168]},o($VU,[2,65]),o($V$,[2,67],{37:$VF,38:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,89:$VT}),o($VU,[2,69]),{37:$VF,38:$VG,43:[1,169],76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,89:$VT},{37:$VF,38:$VG,43:[1,170],76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,89:$VT},{37:$VF,38:$VG,43:[1,171],76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,89:$VT},{9:[1,172]},{9:[2,58]},{9:[2,59]},{32:[1,173],34:$Vw},{33:$Vx,34:$Vy,39:$Vz,40:$VA},{45:[1,174]},{26:161,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,43:[1,175],73:176,74:160},o($V01,[2,80],{78:$VJ,79:$VK,80:$VL,81:$VM}),o($V01,[2,81],{78:$VJ,79:$VK,80:$VL,81:$VM}),o($V11,[2,82],{81:$VM}),o($V11,[2,83],{81:$VM}),o($V11,[2,84],{81:$VM}),o($V11,[2,85]),o($V21,[2,88],{76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),o($V21,[2,89],{76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),o($V21,[2,90],{76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),o($V21,[2,91],{76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),o($V21,[2,92],{76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),o($V21,[2,93],{76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),o($V31,[2,94],{37:$VF,38:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ}),o($V31,[2,95],{37:$VF,38:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ}),{37:$VF,38:$VG,57:[1,177],76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,89:$VT},o($VU,[2,87]),{12:178,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{35:[1,179],37:$VF,38:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,89:$VT},{12:180,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{26:181,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9},{12:182,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},o($VU,[2,115]),{12:183,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{9:[1,184],37:$VF,38:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,89:$VT},{44:[1,185]},{43:[1,186],67:$V41},o($V$,[2,77]),{32:[1,188]},{9:[1,189],33:[1,190]},{32:[1,191]},o($V_,[2,35]),{33:[1,192]},{35:[1,193],37:$VF,38:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,89:$VT},o($VU,[2,64]),{12:194,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{44:[1,195]},{44:[1,196]},{44:[1,197]},{12:199,32:$Vk,42:$Vl,44:$Vm,62:198,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{9:$VV,33:$VW},{59:[1,200]},{44:[1,201]},{43:[1,202],67:$V41},{12:203,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},o($VU,[2,78]),o($VU,[2,107]),{35:[1,204],37:$VF,38:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,89:$VT},{38:[1,205]},{35:[1,206],37:$VF,38:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,89:$VT},o($VY,[2,119],{37:$VF,38:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,89:$VT}),o($VZ,[2,30]),{4:207,6:3,7:4,8:$V1,10:$V2,11:$V3,13:5,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:$V4,26:20,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,36:$Vb,41:$Vc,45:$V0,51:$Vd,59:$Ve,60:$Vf,64:$Vg,65:28,68:32,70:29,71:30,72:$Vh},{44:[1,208]},{26:161,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,74:209},o($V$,[2,79]),o($VZ,[2,31]),{12:210,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{9:[1,211],33:[1,212]},{12:213,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{35:[1,214]},o($V$,[2,66],{37:$VF,38:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,89:$VT}),{4:215,6:3,7:4,8:$V1,10:$V2,11:$V3,13:5,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:$V4,26:20,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,36:$Vb,41:$Vc,45:$V0,51:$Vd,59:$Ve,60:$Vf,64:$Vg,65:28,68:32,70:29,71:30,72:$Vh},{52:216,53:217,54:218,55:219,56:$V51,58:$V61},{4:222,6:3,7:4,8:$V1,10:$V2,11:$V3,13:5,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:$V4,26:20,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,36:$Vb,41:$Vc,45:$V0,51:$Vd,59:$Ve,60:$Vf,64:$Vg,65:28,68:32,70:29,71:30,72:$Vh},{9:[1,223]},{9:[2,60],37:$VF,38:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,89:$VT},{42:[1,224]},{4:225,6:3,7:4,8:$V1,10:$V2,11:$V3,13:5,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:$V4,26:20,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,36:$Vb,41:$Vc,45:$V0,51:$Vd,59:$Ve,60:$Vf,64:$Vg,65:28,68:32,70:29,71:30,72:$Vh},{44:[1,226]},o([9,35,43,45,57,67,89],[2,97],{37:$VF,38:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS}),{35:[1,227]},o($VU,[2,117]),o($VU,[2,116]),{45:[1,228]},{4:229,6:3,7:4,8:$V1,10:$V2,11:$V3,13:5,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:$V4,26:20,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,36:$Vb,41:$Vc,45:$V0,51:$Vd,59:$Ve,60:$Vf,64:$Vg,65:28,68:32,70:29,71:30,72:$Vh},o($V$,[2,76]),{9:[1,230],37:$VF,38:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,89:$VT},o($VZ,[2,33]),{12:231,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{9:[1,232],37:$VF,38:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,89:$VT},{33:[1,233]},{45:[1,234]},{45:[1,235]},{45:[2,49],54:236,55:237,56:$V51,58:$V61},{45:[2,51]},o($V71,[2,53]),{57:[1,238]},{12:239,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{45:[1,240]},{15:242,32:$VX,63:241},{12:243,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{45:[1,244]},{4:245,6:3,7:4,8:$V1,10:$V2,11:$V3,13:5,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:$V4,26:20,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,36:$Vb,41:$Vc,45:$V0,51:$Vd,59:$Ve,60:$Vf,64:$Vg,65:28,68:32,70:29,71:30,72:$Vh},o($VU,[2,108]),o($Vj,[2,74]),{45:[1,246]},o($VZ,[2,32]),{9:[1,247],37:$VF,38:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,89:$VT},o($V_,[2,38]),{12:248,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},o($Vj,[2,40],{46:249,47:250,48:251,50:252,49:$V81}),o($Vj,[2,48]),{45:[2,50]},o($V71,[2,52]),{4:254,6:3,7:4,8:$V1,10:$V2,11:$V3,13:5,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:$V4,26:20,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,36:$Vb,41:$Vc,45:$V0,51:$Vd,59:$Ve,60:$Vf,64:$Vg,65:28,68:32,70:29,71:30,72:$Vh},{37:$VF,38:$VG,57:[1,255],76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,89:$VT},o($Vj,[2,56]),{43:[1,256]},{43:[2,61]},{37:$VF,38:$VG,43:[1,257],76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,89:$VT},o($Vj,[2,72]),{45:[1,258]},o($Vj,[2,75]),o($VZ,[2,34]),{9:[1,259],37:$VF,38:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,89:$VT},o($Vj,[2,41]),{48:260,49:$V81,50:261},o($Vj,[2,43]),{49:[2,46]},{41:[1,263],44:[1,262]},{45:[2,55]},o($V71,$V0,{6:3,7:4,13:5,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,26:20,65:28,70:29,71:30,68:32,4:264,8:$V1,10:$V2,11:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,36:$Vb,41:$Vc,51:$Vd,59:$Ve,60:$Vf,64:$Vg,72:$Vh}),{44:[1,265]},{9:[1,266]},o($Vj,[2,73]),o($V_,[2,39]),o($Vj,[2,42]),{49:[2,45]},{4:267,6:3,7:4,8:$V1,10:$V2,11:$V3,13:5,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:$V4,26:20,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,36:$Vb,41:$Vc,45:$V0,51:$Vd,59:$Ve,60:$Vf,64:$Vg,65:28,68:32,70:29,71:30,72:$Vh},{42:[1,268]},o($V71,[2,54]),{4:269,6:3,7:4,8:$V1,10:$V2,11:$V3,13:5,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:$V4,26:20,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,36:$Vb,41:$Vc,45:$V0,51:$Vd,59:$Ve,60:$Vf,64:$Vg,65:28,68:32,70:29,71:30,72:$Vh},o($Vj,[2,62]),{45:[1,270]},{12:271,32:$Vk,42:$Vl,44:$Vm,65:56,68:57,75:59,77:$Vn,88:$Vo,90:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:58,97:60,98:61,100:$Vv},{45:[1,272]},o($Vj,[2,44]),{37:$VF,38:$VG,43:[1,273],76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,89:$VT},o($Vj,[2,57]),{44:[1,274]},{4:275,6:3,7:4,8:$V1,10:$V2,11:$V3,13:5,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:$V4,26:20,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,36:$Vb,41:$Vc,45:$V0,51:$Vd,59:$Ve,60:$Vf,64:$Vg,65:28,68:32,70:29,71:30,72:$Vh},{45:[1,276]},{49:[2,47]}];
    defaultActions: {[key:number]: any} = {39:[2,1],128:[2,58],129:[2,59],218:[2,51],236:[2,50],242:[2,61],252:[2,46],254:[2,55],261:[2,45],276:[2,47]};

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:

                const root =  Builder.node.root({
                    stmts: $$[$0-1]
                });

                this.$ = root;
                return root
            
break;
case 2: case 45: case 50:

                    $$[$0-1].push($$[$0]);
                    this.$ = $$[$0-1];
                
break;
case 3: case 49:

                    this.$ = $$[$0];
                
break;
case 4: case 46: case 51:

                    this.$ = [$$[$0]];
                
break;
case 5:

                    this.$ = [];
                
break;
case 6:

                                this.$ = Builder.node.break({
                                    line: _$[$0-1].first_line,
                                    column: _$[$0-1].first_column
                                });
                            
break;
case 7:

                                this.$ = Builder.node.continue({
                                    line: _$[$0-1].first_line,
                                    column: _$[$0-1].first_column
                                });
                            
break;
case 8:

                                this.$ = Builder.node.return({
                                    line: _$[$0-1].first_line,
                                    column: _$[$0-1].first_column
                                });
                            
break;
case 9:

                                this.$ = Builder.node.return({
                                    line: _$[$0-2].first_line,
                                    column: _$[$0-2].first_column,
                                    value: $$[$0-1]
                                });
                            
break;
case 10:

                            $$[$0-1].push($$[$0]);
                            this.$ = $$[$0-1];
                        
break;
case 11:

                            this.$ = [$$[$0]];
                        
break;
case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 58: case 59: case 60: case 61: case 70: case 71:
 this.$ = $$[$0]; 
break;
case 23:

                        this.$ = Builder.node.main({
                            line: _$[$0-1].first_line,
                            column: _$[$0-1].first_column,
                            call: $$[$0]
                        });
                    
break;
case 24:
 this.$ = Symbols.INT; 
break;
case 25:
 this.$ = Symbols.DOUBLE; 
break;
case 26:
 this.$ = Symbols.STRING; 
break;
case 27:
 this.$ = Symbols.BOOLEAN; 
break;
case 28:
 this.$ = Symbols.CHAR; 
break;
case 29:

                            this.$ = Builder.node.variableDcl({
                                line: _$[$0-2].first_line,
                                column: _$[$0-2].first_column,
                                variable: Builder.element.primitive({
                                    type: $$[$0-2],
                                    name: $$[$0-1]
                                }),
                            });
                        
break;
case 30:

                            this.$ = Builder.node.variableDcl({
                                line: _$[$0-4].first_line,
                                column: _$[$0-4].first_column,
                                variable: Builder.element.primitive({
                                    type: $$[$0-4],
                                    name: $$[$0-3],
                                }),
                                value: $$[$0-1]
                            });
                        
break;
case 31:

                            this.$ = Builder.node.variableDcl({
                                line: _$[$0-4].first_line,
                                column: _$[$0-4].first_column,
                                variable: Builder.element.vector({
                                    primitive: $$[$0-4],
                                    name: $$[$0-1]
                                }),
                            });
                        
break;
case 32:

                            this.$ = Builder.node.variableDcl({
                                line: _$[$0-6].first_line,
                                column: _$[$0-6].first_column,
                                variable: Builder.element.vector({
                                    primitive: $$[$0-6],
                                    name: $$[$0-3]
                                }),
                                value: $$[$0-1]
                            });
                        
break;
case 33:

                            this.$ = Builder.node.variableDcl({
                                line: _$[$0-5].first_line,
                                column: _$[$0-5].first_column,
                                variable: Builder.element.list({
                                    primitive: $$[$0-3],
                                    name: $$[$0-1]
                                }),
                            });
                        
break;
case 34:

                            this.$ = Builder.node.variableDcl({
                                line: _$[$0-7].first_line,
                                column: _$[$0-7].first_column,
                                variable: Builder.element.list({
                                    primitive: $$[$0-5],
                                    name: $$[$0-3]
                                }),
                                value: $$[$0-1]
                            });
                        
break;
case 35:

                            this.$ = Builder.node.variableAss({
                                line: _$[$0-3].first_line,
                                column: _$[$0-3].first_column,
                                value: $$[$0-1],
                                type: VariableAssigmentType.DIRECT, 
                                reference:{
                                    name: $$[$0-3]
                                }
                            });
                        
break;
case 36:

                            this.$ = Builder.node.variableAss({
                                line: _$[$0-2].first_line,
                                column: _$[$0-2].first_column,
                                type: VariableAssigmentType.INCREMENT,
                                reference:{
                                    name: $$[$0-2]
                                }
                            });
                        
break;
case 37:

                            this.$ = Builder.node.variableAss({
                                line: _$[$0-2].first_line,
                                column: _$[$0-2].first_column,
                                type: VariableAssigmentType.DECREMENT,
                                reference:{
                                    name: $$[$0-2]
                                }
                            });
                        
break;
case 38:

                            this.$ = Builder.node.variableAss({
                                line: _$[$0-6].first_line,
                                column: _$[$0-6].first_column,
                                value: $$[$0-1],
                                type: VariableAssigmentType.INDEXED,
                                reference:{
                                    name: $$[$0-6],
                                    index: $$[$0-4]
                                }
                            });
                        
break;
case 39:

                            this.$ = Builder.node.variableAss({
                                line: _$[$0-8].first_line,
                                column: _$[$0-8].first_column,
                                value: $$[$0-1],
                                type: VariableAssigmentType.INDEXED,
                                reference:{
                                    name: $$[$0-8],
                                    index: $$[$0-5]
                                }
                            });
                        
break;
case 40:

            this.$ = Builder.node.if({
                line: _$[$0-6].first_line,
                column: _$[$0-6].first_column,
                condition: $$[$0-4],
                statements: $$[$0-1],
                chain: []
            });
        
break;
case 41:

            this.$ = Builder.node.if({
                line: _$[$0-7].first_line,
                column: _$[$0-7].first_column,
                condition: $$[$0-5],
                statements: $$[$0-2],
                chain: $$[$0]
            });
        
break;
case 42:

                this.$ = $$[$0-1];
                this.$.push($$[$0]);
            
break;
case 43: case 53:

                this.$ = [$$[$0]];
            
break;
case 44:

            this.$ = Builder.node.else({
                line: _$[$0-3].first_line,
                column: _$[$0-3].first_column,
                statements: $$[$0-1]
            });
        
break;
case 47:

                this.$ = Builder.node.elseIf({
                    line: _$[$0-7].first_line,
                    column: _$[$0-7].first_column,
                    condition: $$[$0-4],
                    statements: $$[$0-1]
                });
            
break;
case 48:

                this.$ = Builder.node.switch({
                    line: _$[$0-6].first_line,
                    column: _$[$0-6].first_column,
                    value: $$[$0-4],
                    cases: $$[$0-1]
                });
            
break;
case 52:

                $$[$0-1].push($$[$0]);
                this.$ = $$[$0-1];
            
break;
case 54:

            this.$ = Builder.node.case({
                line: _$[$0-3].first_line,
                column: _$[$0-3].first_column,
                condition: $$[$0-2],
                statements: $$[$0]
            });
        
break;
case 55:

                this.$ = Builder.node.default({
                    line: _$[$0-2].first_line,
                    column: _$[$0-2].first_column,
                    statements: $$[$0]
                });
            
break;
case 56:

            this.$ = Builder.node.while({
                line: _$[$0-6].first_line,
                column: _$[$0-6].first_column,
                condition: $$[$0-4],
                statements: $$[$0-1]
            });
        
break;
case 57:

            this.$ = Builder.node.for({
                line: _$[$0-10].first_line,
                column: _$[$0-10].first_column,
                init: $$[$0-8],
                condition: $$[$0-6],
                update: $$[$0-4],
                statements: $$[$0-1]
            });
        
break;
case 62:

                this.$ = Builder.node.doWhile({
                    line: _$[$0-8].first_line,
                    column: _$[$0-8].first_column,
                    condition: $$[$0-2],
                    statements: $$[$0-6]
                });
            
break;
case 63: case 68:
 this.$ = $$[$0-1]; 
break;
case 64:

                            this.$ = Builder.node.subroutineCall({
                                line: _$[$0-3].first_line,
                                column: _$[$0-3].first_column,
                                name: $$[$0-3],
                                args: $$[$0-1]
                            });
                        
break;
case 65:

                            this.$ = Builder.node.subroutineCall({
                                line: _$[$0-2].first_line,
                                column: _$[$0-2].first_column,
                                name: $$[$0-2],
                                args: []
                            });
                        
break;
case 66:

                                $$[$0-2].push($$[$0]);
                                this.$ = $$[$0-2];
                            
break;
case 67:

                                this.$ = [$$[$0]];
                            
break;
case 69:

                            this.$ = Builder.node.objectSubroutineCall({
                                line: _$[$0-2].first_line,
                                column: _$[$0-2].first_column,
                                objectName: $$[$0-2],
                                call: $$[$0]
                            });
                        
break;
case 72:

                            this.$ = Builder.node.subroutineDcl({
                                line: _$[$0-6].first_line,
                                column: _$[$0-6].first_column,
                                name: $$[$0-5],
                                args: [],
                                statements: $$[$0-1],
                                type: SubroutineType.METHOD,
                                returnType: Symbols.VOID
                            });
                        
break;
case 73:

                            this.$ = Builder.node.subroutineDcl({
                                line: _$[$0-7].first_line,
                                column: _$[$0-7].first_column,
                                name: $$[$0-6],
                                args: $$[$0-4],
                                statements: $$[$0-1],
                                type: SubroutineType.METHOD,
                                returnType: Symbols.VOID
                            });
                        
break;
case 74:

                            this.$ = Builder.node.subroutineDcl({
                                line: _$[$0-6].first_line,
                                column: _$[$0-6].first_column,
                                name: $$[$0-5],
                                args: [],
                                statements: $$[$0-1],
                                type: SubroutineType.FUNCTION,
                                returnType: $$[$0-6]
                            });
                        
break;
case 75:

                            this.$ = Builder.node.subroutineDcl({
                                line: _$[$0-7].first_line,
                                column: _$[$0-7].first_column,
                                name: $$[$0-6],
                                args: $$[$0-4],
                                statements: $$[$0-1],
                                type: SubroutineType.FUNCTION,
                                returnType: $$[$0-7]
                            });
                        
break;
case 76:

                                    $$[$0-2].push($$[$0]);
                                    this.$ = $$[$0-2];
                                
break;
case 77:

                                    this.$ = [$$[$0]];
                                
break;
case 78:

            this.$ = Builder.node.cast({
                line: _$[$0-3].first_line,
                column: _$[$0-3].first_column,
                type: $$[$0-2],
                value: $$[$0]
            });
        
break;
case 79:

                                    this.$ = Builder.node.argument({
                                        line: _$[$0-1].first_line,
                                        column: _$[$0-1].first_column,
                                        type: [$$[$0-1]],
                                        name: $$[$0]
                                    });
                                
break;
case 80:

                    this.$ = Builder.node.arithmeticExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: ArithmeticExpressionType.PLUS,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 81:

                    this.$ = Builder.node.arithmeticExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: ArithmeticExpressionType.MINUS,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 82:

                    this.$ = Builder.node.arithmeticExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: ArithmeticExpressionType.TIMES,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 83:

                    this.$ = Builder.node.arithmeticExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: ArithmeticExpressionType.DIVIDE,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 84:

                    this.$ = Builder.node.arithmeticExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: ArithmeticExpressionType.MOD,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 85:

                    this.$ = Builder.node.arithmeticExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: ArithmeticExpressionType.POWER,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 86:

                    this.$ = Builder.node.unaryMinusExp({
                        line: _$[$0-1].first_line,
                        column: _$[$0-1].first_column,
                        operand: $$[$0]
                    });
                
break;
case 87:

                    this.$ = $$[$0-1];
                
break;
case 88:

                    this.$ = Builder.node.relationalExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: RelationalExpresionType.EQUALS,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 89:

                    this.$ = Builder.node.relationalExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: RelationalExpresionType.NOT_EQUAL,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 90:

                    this.$ = Builder.node.relationalExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: RelationalExpresionType.LESS_THAN,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 91:

                    this.$ = Builder.node.relationalExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: RelationalExpresionType.LESS_THAN_OR_EQUAL,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 92:

                    this.$ = Builder.node.relationalExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: RelationalExpresionType.GREATER_THAN,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 93:

                    this.$ = Builder.node.relationalExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: RelationalExpresionType.GREATER_THAN_OR_EQUAL,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 94:

                    this.$ = Builder.node.logicalExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: LogicalExpressionType.AND,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 95:

                    this.$ = Builder.node.logicalExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: LogicalExpressionType.OR,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 96:

                    this.$ = Builder.node.unaryNotExp({
                        line: _$[$0-1].first_line,
                       column: _$[$0-1].first_column,
                        operand: $$[$0]
                    });
                
break;
case 97:

                    this.$ = Builder.node.ternaryExp({
                        line: _$[$0-4].first_line,
                        column: _$[$0-4].first_column,
                        condition: $$[$0-4],
                        trueExpression: $$[$0-2],
                        falseExpression: $$[$0]
                    });
                
break;
case 98:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0].first_line,
                        column: _$[$0].first_column,
                        value: Builder.node.literal({
                            line: _$[$0].first_line,
                            column: _$[$0].first_column,
                            type: Symbols.INT,
                            value: Number($$[$0])
                        })
                    });
                
break;
case 99:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0].first_line,
                        column: _$[$0].first_column,
                        value: Builder.node.literal({
                            line: _$[$0].first_line,
                            column: _$[$0].first_column,
                            type: Symbols.DOUBLE,
                            value: Number($$[$0])
                        })
                    });
                
break;
case 100:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0].first_line,
                        column: _$[$0].first_column,
                        value: Builder.node.literal({
                            line: _$[$0].first_line,
                            column: _$[$0].first_column,
                            type: Symbols.STRING,
                            value: $$[$0]
                        })
                    });
                
break;
case 101:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0].first_line,
                        column: _$[$0].first_column,
                        value: Builder.node.literal({
                            line: _$[$0].first_line,
                            column: _$[$0].first_column,
                            type: Symbols.CHAR,
                            value: $$[$0]
                        })
                    });
                
break;
case 102:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0].first_line,
                        column: _$[$0].first_column,
                        value: Builder.node.literal({
                            line: _$[$0].first_line,
                            column: _$[$0].first_column,
                            type: Symbols.BOOLEAN,
                            value: true
                        })
                    });
                
break;
case 103:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0].first_line,
                        column: _$[$0].first_column,
                        value: Builder.node.literal({
                            line: _$[$0].first_line,
                            column: _$[$0].first_column,
                            type: Symbols.BOOLEAN,
                            value: false
                        })
                    });
                
break;
case 104:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0].first_line,
                        column: _$[$0].first_column,
                        value: Builder.node.reference({
                            line: _$[$0].first_line,
                            column: _$[$0].first_column,
                            name: $$[$0],
                            type: ReferenceType.DIRECT
                        })
                    });
                
break;
case 105:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0-1].first_line,
                        column: _$[$0-1].first_column,
                        value: Builder.node.reference({
                            line: _$[$0-1].first_line,
                            column: _$[$0-1].first_column,
                            name: $$[$0-1],
                            type: ReferenceType.INCREMENT
                        })
                    });
                
break;
case 106:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0-1].first_line,
                        column: _$[$0-1].first_column,
                        value: Builder.node.reference({
                            line: _$[$0-1].first_line,
                            column: _$[$0-1].first_column,
                            name: $$[$0-1],
                            type: ReferenceType.DECREMENT
                        })
                    });
                
break;
case 107:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0-3].first_line,
                        column: _$[$0-3].first_column,
                        value: Builder.node.reference({
                            line: _$[$0-3].first_line,
                            column: _$[$0-3].first_column,
                            name: $$[$0-3],
                            type: ReferenceType.DIRECT,
                            index: $$[$0-1]
                        })
                    });
                
break;
case 108:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0-5].first_line,
                        column: _$[$0-5].first_column,
                        value: Builder.node.reference({
                            line: _$[$0-5].first_line,
                            column: _$[$0-5].first_column,
                            name: $$[$0-5],
                            type: ReferenceType.DIRECT,
                            index: $$[$0-2]
                        })
                    });
                
break;
case 109: case 110:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0].first_line,
                        column: _$[$0].first_column,
                        value: Builder.node.call({
                            line: _$[$0].first_line,
                            column: _$[$0].first_column,
                            call: $$[$0]
                        })
                    });
                
break;
case 111: case 112:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0].first_line,
                        column: _$[$0].first_column,
                        value: $$[$0]
                    });
                
break;
case 115:

                            this.$ = Builder.node.initializer({
                                line: _$[$0-2].first_line,
                                column: _$[$0-2].first_column,
                                objectType: InitializerType.VECTOR,
                                initializer:{
                                    values: $$[$0-1]
                                }
                            });
                        
break;
case 116:

                            this.$ = Builder.node.initializer({
                                line: _$[$0-4].first_line,
                                column: _$[$0-4].first_column,
                                objectType: InitializerType.VECTOR,
                                initializer:{
                                    primitive: $$[$0-3],
                                    reserve: $$[$0-1]
                                }
                            });
                        
break;
case 117:

                        this.$ = Builder.node.initializer({
                            line: _$[$0-4].first_line,
                            column: _$[$0-4].first_column,
                            objectType: InitializerType.LIST,
                            initializer:{
                                primitive: $$[$0-1]
                            }
                        });
                    
break;
case 118:
 this.$ = [$$[$0]] 
break;
case 119:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
        }
    }
}


/* generated by ts-jison-lex 0.3.0 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';
export class AnalyzerLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"case-insensitive":true,"moduleName":"Analyzer"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\s+)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?::)/i,/^(?:&&)/i,/^(?:\\\|\\\|)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:=)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:void\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:main\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:return\b)/i,/^(?:continue\b)/i,/^(?:break\b)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:([a-zA-ZÑñ]|(_[a-zA-ZÑñ]))([a-zA-ZÑñ]|[0-9]|_)*)/i,/^(?:'([^\r\n'\\]|\\[btnfr"'\\]|\\[0-9a-fA-F]{2}|\\u[0-9a-fA-F]{4})')/i,/^(?:"([^\"\\]|\\.)*")/i,/^(?:[0-9]+(\.[0-9]+))/i,/^(?:[0-9]+)/i,/^(?:$)/i,/^(?:.)/i];
    conditions: any = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0:/* skip */
      break;
    case 1:/* skip */
      break;
    case 2:/* skip */
      break;
    case 3: return "INT"; 
      break;
    case 4: return "DOUBLE"; 
      break;
    case 5: return "BOOLEAN"; 
      break;
    case 6: return "CHAR"; 
      break;
    case 7: return "STRING"; 
      break;
    case 8: return "PLUS_PLUS"; 
      break;
    case 9: return "MINUS_MINUS"; 
      break;
    case 10: return "PLUS"; 
      break;
    case 11: return "MINUS"; 
      break;
    case 12: return "TIMES"; 
      break;
    case 13: return "DIVIDE"; 
      break;
    case 14: return "MOD"; 
      break;
    case 15: return "EQUALS"; 
      break;
    case 16: return "NOT_EQUAL"; 
      break;
    case 17: return "LESS_THAN_OR_EQUAL"; 
      break;
    case 18: return "GREATER_THAN_OR_EQUAL"; 
      break;
    case 19: return "LESS_THAN"; 
      break;
    case 20: return "GREATER_THAN"; 
      break;
    case 21: return "INTERROGATION"; 
      break;
    case 22: return "COLON"; 
      break;
    case 23: return "AND"; 
      break;
    case 24: return "OR;" 
      break;
    case 25: return "NOT"; 
      break;
    case 26: return "LPAREN"; 
      break;
    case 27: return "RPAREN"; 
      break;
    case 28: return "SEMICOLON"; 
      break;
    case 29: return "EQUAL"; 
      break;
    case 30: return "LBRACKET"; 
      break;
    case 31: return "RBRACKET"; 
      break;
    case 32: return "LBRACE"; 
      break;
    case 33: return "RBRACE"; 
      break;
    case 34: return "IF"; 
      break;
    case 35: return "ELSE"; 
      break;
    case 36: return "SWITCH"; 
      break;
    case 37: return "CASE"; 
      break;
    case 38: return "DEFAULT"; 
      break;
    case 39: return "WHILE"; 
      break;
    case 40: return "FOR"; 
      break;
    case 41: return "DO"; 
      break;
    case 42: return "VOID"; 
      break;
    case 43: return "TRUE"; 
      break;
    case 44: return "FALSE"; 
      break;
    case 45: return "MAIN"; 
      break;
    case 46: return "NEW"; 
      break;
    case 47: return "LIST"; 
      break;
    case 48: return "RETURN"; 
      break;
    case 49: return "CONTINUE"; 
      break;
    case 50: return "BREAK"; 
      break;
    case 51: return "COMMA"; 
      break;
    case 52: return "DOT"; 
      break;
    case 53: yy_.yytext = yy_.yytext.toLowerCase();  return "ID"; 
      break;
    case 54: yy_.yytext = yy_.yytext.substring(1, yy_.yyleng-1)  
                                                                                        .replace(/\\n/g, '\n')
                                                                                        .replace(/\\\\/g, '\\')
                                                                                        .replace(/\\"/g, '"')
                                                                                        .replace(/\\t/g, '\t')
                                                                                        .replace(/\\\'/g, '\''); return "CHAR_LITERAL"; 
      break;
    case 55: yy_.yytext = yy_.yytext.substring(1, yy_.yyleng-1)  
                                                                                        .replace(/\\n/g, '\n')
                                                                                        .replace(/\\\\/g, '\\')
                                                                                        .replace(/\\"/g, '"')
                                                                                        .replace(/\\t/g, '\t')
                                                                                        .replace(/\\\'/g, '\''); return "STRING_LITERAL"; 
      break;
    case 56: return "DOUBLE_LITERAL"; 
      break;
    case 57: return "INT_LITERAL"; 
      break;
    case 58: return "EOF"; 
      break;
    case 59: 
                                        Builder.ast.context.errorTable.addError({
                                            type: "Lexico",
                                            message: `No se reconoció el token: ${yy_.yytext}`,
                                            line: yy_.yylineno+1,
                                            column:  yy_.yylloc.last_column+1
                                        });
                                        return "UNEXPECTED_TOKEN"; 
                                    
      break;
        }
    }
}

