/* parser generated by jison 0.3.0 */
/**
 * Returns a Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

    import { Builder } from '../ast';
    import { Type, Symbols, SubroutineType } from '../elements';
    import { VariableAssigmentType } from '../statements/variable';
    import { ArithmeticExpressionType,RelationalExpresionType,LogicalExpressionType } from '../statements/expression';
    import { ReferenceType } from '../statements/value';


import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType, o } from '@ts-jison/parser';const $V0=[2,5],$V1=[1,5],$V2=[1,7],$V3=[1,8],$V4=[1,9],$V5=[1,29],$V6=[1,30],$V7=[1,31],$V8=[1,32],$V9=[1,33],$Va=[1,20],$Vb=[1,21],$Vc=[1,22],$Vd=[1,23],$Ve=[1,24],$Vf=[1,25],$Vg=[1,34],$Vh=[1,37,48,50],$Vi=[1,8,10,11,24,25,26,27,28,29,33,37,43,48,50,51,52,56,64],$Vj=[1,51],$Vk=[1,42],$Vl=[1,41],$Vm=[1,43],$Vn=[1,44],$Vo=[1,45],$Vp=[1,46],$Vq=[1,47],$Vr=[1,48],$Vs=[1,49],$Vt=[1,50],$Vu=[1,54],$Vv=[1,55],$Vw=[1,56],$Vx=[1,57],$Vy=[1,66],$Vz=[1,67],$VA=[1,68],$VB=[1,69],$VC=[1,70],$VD=[1,71],$VE=[1,72],$VF=[1,73],$VG=[1,74],$VH=[1,75],$VI=[1,76],$VJ=[1,77],$VK=[1,78],$VL=[1,79],$VM=[1,80],$VN=[9,35,49,59,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82],$VO=[1,86],$VP=[1,87],$VQ=[1,102],$VR=[1,8,9,10,11,24,25,26,27,28,29,33,37,43,48,50,51,52,56,64],$VS=[1,8,9,10,11,24,25,26,27,28,29,33,35,37,43,48,50,51,52,56,64],$VT=[35,59],$VU=[9,35,49,59,67,68,73,74,75,76,77,78,79,80,82],$VV=[9,35,49,59,67,68,69,70,71,73,74,75,76,77,78,79,80,82],$VW=[9,35,49,59,73,74,75,76,77,78,79,80,82],$VX=[9,35,49,59,79,80,82],$VY=[1,141],$VZ=[1,162],$V_=[1,161],$V$=[37,48,50],$V01=[1,196];

export class AnalyzerParser extends JisonParser implements JisonParserApi {
    $?: any;

    constructor (yy = {}, lexer = new AnalyzerLexer(yy)) {
      super(yy, lexer);
    }

    symbols_: SymbolsType = {"error":2,"program":3,"statements":4,"normal_statements":5,"flow_control_statement":6,"EOF":7,"BREAK":8,"SEMICOLON":9,"CONTINUE":10,"RETURN":11,"expression":12,"statement":13,"variable_declaration":14,"variable_assignment":15,"if":16,"switch":17,"while":18,"for":19,"do_while":20,"subroutine_call":21,"subroutine_declaration":22,"type":23,"INT":24,"DOUBLE":25,"STRING":26,"BOOLEAN":27,"CHAR":28,"ID":29,"EQUAL":30,"PLUS_PLUS":31,"MINUS_MINUS":32,"IF":33,"LPAREN":34,"RPAREN":35,"LBRACE":36,"RBRACE":37,"if_chain":38,"elseif_chain":39,"else":40,"ELSE":41,"elseif":42,"SWITCH":43,"switch_cases":44,"case_list":45,"default":46,"case":47,"CASE":48,"COLON":49,"DEFAULT":50,"WHILE":51,"FOR":52,"for_init":53,"for_condition":54,"for_update":55,"DO":56,"subroutine_call_aux":57,"subroutine_call_params":58,"COMMA":59,"object_subroutine_call":60,"DOT":61,"method_declaration":62,"function_declaration":63,"VOID":64,"subroutine_declaration_params":65,"subroutine_declaration_param":66,"PLUS":67,"MINUS":68,"TIMES":69,"DIVIDE":70,"MOD":71,"POWER":72,"EQUALS":73,"NOT_EQUAL":74,"LESS_THAN":75,"LESS_THAN_OR_EQUAL":76,"GREATER_THAN":77,"GREATER_THAN_OR_EQUAL":78,"AND":79,"OR":80,"NOT":81,"INTERROGATION":82,"INT_LITERAL":83,"DOUBLE_LITERAL":84,"STRING_LITERAL":85,"BOOLEAN_LITERAL":86,"CHAR_LITERAL":87,"TRUE":88,"FALSE":89,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",7:"EOF",8:"BREAK",9:"SEMICOLON",10:"CONTINUE",11:"RETURN",24:"INT",25:"DOUBLE",26:"STRING",27:"BOOLEAN",28:"CHAR",29:"ID",30:"EQUAL",31:"PLUS_PLUS",32:"MINUS_MINUS",33:"IF",34:"LPAREN",35:"RPAREN",36:"LBRACE",37:"RBRACE",41:"ELSE",43:"SWITCH",48:"CASE",49:"COLON",50:"DEFAULT",51:"WHILE",52:"FOR",56:"DO",59:"COMMA",61:"DOT",64:"VOID",67:"PLUS",68:"MINUS",69:"TIMES",70:"DIVIDE",71:"MOD",72:"POWER",73:"EQUALS",74:"NOT_EQUAL",75:"LESS_THAN",76:"LESS_THAN_OR_EQUAL",77:"GREATER_THAN",78:"GREATER_THAN_OR_EQUAL",79:"AND",80:"OR",81:"NOT",82:"INTERROGATION",83:"INT_LITERAL",84:"DOUBLE_LITERAL",85:"STRING_LITERAL",86:"BOOLEAN_LITERAL",87:"CHAR_LITERAL",88:"TRUE",89:"FALSE"};
    productions_: ProductionsType = [0,[3,1],[4,2],[4,1],[4,1],[4,0],[4,1],[6,2],[6,2],[6,2],[6,3],[5,2],[5,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[23,1],[23,1],[23,1],[23,1],[23,1],[14,3],[14,5],[15,4],[15,3],[15,3],[16,7],[16,8],[38,2],[38,4],[40,4],[39,2],[39,1],[42,8],[17,7],[44,1],[44,2],[44,1],[45,2],[45,1],[47,4],[46,3],[18,7],[19,11],[53,1],[53,1],[54,1],[55,1],[20,9],[21,2],[57,4],[57,3],[58,3],[58,1],[60,3],[22,1],[22,1],[62,7],[62,8],[63,7],[63,8],[65,3],[65,1],[66,2],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,2],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,2],[12,5],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,2],[12,2],[12,1]];
    table: Array<StateType> = [{1:$V0,3:1,4:2,5:3,6:4,7:$V1,8:$V2,10:$V3,11:$V4,13:6,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,33:$Vb,43:$Vc,51:$Vd,52:$Ve,56:$Vf,57:26,62:27,63:28,64:$Vg},{1:[3]},{1:[2,1]},o($Vh,[2,3],{14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,57:26,62:27,63:28,6:35,13:36,8:$V2,10:$V3,11:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,33:$Vb,43:$Vc,51:$Vd,52:$Ve,56:$Vf,64:$Vg}),o($Vh,[2,4]),o($Vh,[2,6]),o($Vi,[2,12]),{9:[1,37]},{9:[1,38]},{9:[1,39],12:40,29:$Vj,34:$Vk,57:52,68:$Vl,81:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},o($Vi,[2,13]),o($Vi,[2,14]),o($Vi,[2,15]),o($Vi,[2,16]),o($Vi,[2,17]),o($Vi,[2,18]),o($Vi,[2,19]),o($Vi,[2,20]),o($Vi,[2,21]),{29:[1,53]},{30:$Vu,31:$Vv,32:$Vw,34:$Vx},{34:[1,58]},{34:[1,59]},{34:[1,60]},{34:[1,61]},{36:[1,62]},{9:[1,63]},o($Vi,[2,61]),o($Vi,[2,62]),{29:[2,22]},{29:[2,23]},{29:[2,24]},{29:[2,25]},{29:[2,26]},{29:[1,64]},o($Vh,[2,2]),o($Vi,[2,11]),o($Vh,[2,7]),o($Vh,[2,8]),o($Vh,[2,9]),{9:[1,65],67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,82:$VM},{12:81,29:$Vj,34:$Vk,57:52,68:$Vl,81:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{12:82,29:$Vj,34:$Vk,57:52,68:$Vl,81:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{12:83,29:$Vj,34:$Vk,57:52,68:$Vl,81:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},o($VN,[2,88]),o($VN,[2,89]),o($VN,[2,90]),o($VN,[2,91]),o($VN,[2,92]),o($VN,[2,93]),o($VN,[2,94]),o($VN,[2,95],{31:[1,84],32:[1,85],34:$Vx}),o($VN,[2,98]),{9:$VO,30:$VP,34:[1,88]},{12:89,29:$Vj,34:$Vk,57:52,68:$Vl,81:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{9:[1,90]},{9:[1,91]},{12:94,29:$Vj,34:$Vk,35:[1,93],57:52,58:92,68:$Vl,81:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{12:95,29:$Vj,34:$Vk,57:52,68:$Vl,81:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{12:96,29:$Vj,34:$Vk,57:52,68:$Vl,81:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{12:97,29:$Vj,34:$Vk,57:52,68:$Vl,81:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{14:99,15:100,23:101,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$VQ,53:98},{4:103,5:3,6:4,7:$V1,8:$V2,10:$V3,11:$V4,13:6,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,33:$Vb,37:$V0,43:$Vc,51:$Vd,52:$Ve,56:$Vf,57:26,62:27,63:28,64:$Vg},o($Vi,[2,55]),{34:[1,104]},o($Vh,[2,10]),{12:105,29:$Vj,34:$Vk,57:52,68:$Vl,81:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{12:106,29:$Vj,34:$Vk,57:52,68:$Vl,81:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{12:107,29:$Vj,34:$Vk,57:52,68:$Vl,81:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{12:108,29:$Vj,34:$Vk,57:52,68:$Vl,81:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{12:109,29:$Vj,34:$Vk,57:52,68:$Vl,81:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{12:110,29:$Vj,34:$Vk,57:52,68:$Vl,81:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{12:111,29:$Vj,34:$Vk,57:52,68:$Vl,81:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{12:112,29:$Vj,34:$Vk,57:52,68:$Vl,81:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{12:113,29:$Vj,34:$Vk,57:52,68:$Vl,81:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{12:114,29:$Vj,34:$Vk,57:52,68:$Vl,81:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{12:115,29:$Vj,34:$Vk,57:52,68:$Vl,81:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{12:116,29:$Vj,34:$Vk,57:52,68:$Vl,81:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{12:117,29:$Vj,34:$Vk,57:52,68:$Vl,81:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{12:118,29:$Vj,34:$Vk,57:52,68:$Vl,81:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{12:119,29:$Vj,34:$Vk,57:52,68:$Vl,81:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},o($VN,[2,76]),{35:[1,120],67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,82:$VM},o($VN,[2,86]),o($VN,[2,96]),o($VN,[2,97]),o($VR,[2,27]),{12:121,29:$Vj,34:$Vk,57:52,68:$Vl,81:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{23:125,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,35:[1,122],65:123,66:124},{9:[1,126],67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,82:$VM},o($VS,[2,30]),o($VS,[2,31]),{35:[1,127],59:[1,128]},o($VN,[2,57]),o($VT,[2,59],{67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,82:$VM}),{35:[1,129],67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,82:$VM},{35:[1,130],67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,82:$VM},{35:[1,131],67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,82:$VM},{9:[1,132]},{9:[2,50]},{9:[2,51]},{29:[1,133]},{30:$Vu,31:$Vv,32:$Vw},{37:[1,134]},{23:125,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,35:[1,135],65:136,66:124},o($VU,[2,70],{69:$VA,70:$VB,71:$VC,72:$VD}),o($VU,[2,71],{69:$VA,70:$VB,71:$VC,72:$VD}),o($VV,[2,72],{72:$VD}),o($VV,[2,73],{72:$VD}),o($VV,[2,74],{72:$VD}),o($VV,[2,75]),o($VW,[2,78],{67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD}),o($VW,[2,79],{67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD}),o($VW,[2,80],{67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD}),o($VW,[2,81],{67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD}),o($VW,[2,82],{67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD}),o($VW,[2,83],{67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD}),o($VX,[2,84],{67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ}),o($VX,[2,85],{67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ}),{49:[1,137],67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,82:$VM},o($VN,[2,77]),{9:[1,138],67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,82:$VM},{36:[1,139]},{35:[1,140],59:$VY},o($VT,[2,68]),{29:[1,142]},o($VS,[2,29]),o($VN,[2,56]),{12:143,29:$Vj,34:$Vk,57:52,68:$Vl,81:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{36:[1,144]},{36:[1,145]},{36:[1,146]},{12:148,29:$Vj,34:$Vk,54:147,57:52,68:$Vl,81:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{9:$VO,30:$VP},{51:[1,149]},{36:[1,150]},{35:[1,151],59:$VY},{12:152,29:$Vj,34:$Vk,57:52,68:$Vl,81:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},o($VR,[2,28]),{4:153,5:3,6:4,7:$V1,8:$V2,10:$V3,11:$V4,13:6,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,33:$Vb,37:$V0,43:$Vc,51:$Vd,52:$Ve,56:$Vf,57:26,62:27,63:28,64:$Vg},{36:[1,154]},{23:125,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,66:155},o($VT,[2,69]),o($VT,[2,58],{67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,82:$VM}),{4:156,5:3,6:4,7:$V1,8:$V2,10:$V3,11:$V4,13:6,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,33:$Vb,37:$V0,43:$Vc,51:$Vd,52:$Ve,56:$Vf,57:26,62:27,63:28,64:$Vg},{44:157,45:158,46:159,47:160,48:$VZ,50:$V_},{4:163,5:3,6:4,7:$V1,8:$V2,10:$V3,11:$V4,13:6,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,33:$Vb,37:$V0,43:$Vc,51:$Vd,52:$Ve,56:$Vf,57:26,62:27,63:28,64:$Vg},{9:[1,164]},{9:[2,52],67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,82:$VM},{34:[1,165]},{4:166,5:3,6:4,7:$V1,8:$V2,10:$V3,11:$V4,13:6,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,33:$Vb,37:$V0,43:$Vc,51:$Vd,52:$Ve,56:$Vf,57:26,62:27,63:28,64:$Vg},{36:[1,167]},o([9,35,49,59,82],[2,87],{67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL}),{37:[1,168]},{4:169,5:3,6:4,7:$V1,8:$V2,10:$V3,11:$V4,13:6,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,33:$Vb,37:$V0,43:$Vc,51:$Vd,52:$Ve,56:$Vf,57:26,62:27,63:28,64:$Vg},o($VT,[2,67]),{37:[1,170]},{37:[1,171]},{37:[2,41],46:172,47:173,48:$VZ,50:$V_},{37:[2,43]},o($V$,[2,45]),{49:[1,174]},{12:175,29:$Vj,34:$Vk,57:52,68:$Vl,81:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{37:[1,176]},{15:178,29:$VQ,55:177},{12:179,29:$Vj,34:$Vk,57:52,68:$Vl,81:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{37:[1,180]},{4:181,5:3,6:4,7:$V1,8:$V2,10:$V3,11:$V4,13:6,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,33:$Vb,37:$V0,43:$Vc,51:$Vd,52:$Ve,56:$Vf,57:26,62:27,63:28,64:$Vg},o($Vi,[2,65]),{37:[1,182]},o($Vi,[2,32],{38:183,39:184,42:186,41:[1,185]}),o($Vi,[2,40]),{37:[2,42]},o($V$,[2,44]),{4:187,5:3,6:4,7:$V1,8:$V2,10:$V3,11:$V4,13:6,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,33:$Vb,37:$V0,43:$Vc,51:$Vd,52:$Ve,56:$Vf,57:26,62:27,63:28,64:$Vg},{49:[1,188],67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,82:$VM},o($Vi,[2,48]),{35:[1,189]},{35:[2,53]},{35:[1,190],67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,82:$VM},o($Vi,[2,63]),{37:[1,191]},o($Vi,[2,66]),o($Vi,[2,33]),{40:192,41:[1,194],42:193},{33:$V01,36:[1,195]},{41:[2,38]},{37:[2,47]},o($V$,$V0,{5:3,6:4,13:6,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,57:26,62:27,63:28,4:197,7:$V1,8:$V2,10:$V3,11:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,33:$Vb,43:$Vc,51:$Vd,52:$Ve,56:$Vf,64:$Vg}),{36:[1,198]},{9:[1,199]},o($Vi,[2,64]),o($Vi,[2,34]),{41:[2,37]},{33:$V01,36:[1,200]},{4:201,5:3,6:4,7:$V1,8:$V2,10:$V3,11:$V4,13:6,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,33:$Vb,37:$V0,43:$Vc,51:$Vd,52:$Ve,56:$Vf,57:26,62:27,63:28,64:$Vg},{34:[1,202]},o($V$,[2,46]),{4:203,5:3,6:4,7:$V1,8:$V2,10:$V3,11:$V4,13:6,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,33:$Vb,37:$V0,43:$Vc,51:$Vd,52:$Ve,56:$Vf,57:26,62:27,63:28,64:$Vg},o($Vi,[2,54]),{4:204,5:3,6:4,7:$V1,8:$V2,10:$V3,11:$V4,13:6,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,33:$Vb,37:$V0,43:$Vc,51:$Vd,52:$Ve,56:$Vf,57:26,62:27,63:28,64:$Vg},{37:[1,205]},{12:206,29:$Vj,34:$Vk,57:52,68:$Vl,81:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{37:[1,207]},{37:[1,208]},o($Vi,[2,35]),{35:[1,209],67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,82:$VM},o($Vi,[2,49]),o($Vi,[2,36]),{36:[1,210]},{4:211,5:3,6:4,7:$V1,8:$V2,10:$V3,11:$V4,13:6,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,33:$Vb,37:$V0,43:$Vc,51:$Vd,52:$Ve,56:$Vf,57:26,62:27,63:28,64:$Vg},{37:[1,212]},{41:[2,39]}];
    defaultActions: {[key:number]: any} = {2:[2,1],29:[2,22],30:[2,23],31:[2,24],32:[2,25],33:[2,26],99:[2,50],100:[2,51],159:[2,43],172:[2,42],178:[2,53],186:[2,38],187:[2,47],193:[2,37],212:[2,39]};

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:

                this.$ = Builder.node.root({
                    stmts: $$[$0]
                });
            
break;
case 2: case 37: case 42:

                    $$[$0-1].push($$[$0]);
                    this.$ = $$[$0-1];
                
break;
case 3: case 41:

                    this.$ = $$[$0];
                
break;
case 4: case 38: case 43:

                    this.$ = [$$[$0]];
                
break;
case 5: case 6:

                    this.$ = [];
                
break;
case 7:

                                this.$ = Builder.node.break({
                                    line: _$[$0-1].first_line,
                                    column: _$[$0-1].first_column
                                });
                            
break;
case 8:

                                this.$ = Builder.node.continue({
                                    line: _$[$0-1].first_line,
                                    column: _$[$0-1].first_column
                                });
                            
break;
case 9:

                                this.$ = Builder.node.return({
                                    line: _$[$0-1].first_line,
                                    column: _$[$0-1].first_column
                                });
                            
break;
case 10:

                                this.$ = Builder.node.return({
                                    line: _$[$0-2].first_line,
                                    column: _$[$0-2].first_column,
                                    value: $$[$0-1]
                                });
                            
break;
case 11:

                            $$[$0-1].push($$[$0]);
                            this.$ = $$[$0-1];
                        
break;
case 12:

                            this.$ = [$$[$0]];
                        
break;
case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 50: case 51: case 52: case 53: case 61: case 62:
 this.$ = $$[$0]; 
break;
case 22:
 this.$ = Type.INT; 
break;
case 23:
 this.$ = Type.DOUBLE; 
break;
case 24:
 this.$ = Type.STRING; 
break;
case 25:
 this.$ = Type.BOOLEAN; 
break;
case 26:
 this.$ = Type.CHAR; 
break;
case 27:

                            this.$ = Builder.node.variableDcl({
                                line: _$[$0-2].first_line,
                                column: _$[$0-2].first_column,
                                type: $$[$0-2],
                                name: $$[$0-1]
                            });
                        
break;
case 28:

                            this.$ = Builder.node.variableDcl({
                                line: _$[$0-4].first_line,
                                column: _$[$0-4].first_column,
                                type: $$[$0-4],
                                name: $$[$0-3],
                                value: $$[$0-1]
                            });
                        
break;
case 29:

                            this.$ = Builder.node.variableAss({
                                line: _$[$0-3].first_line,
                                column: _$[$0-3].first_column,
                                name: $$[$0-3],
                                value: $$[$0-1],
                                type: VariableAssigmentType.DIRECT
                            });
                        
break;
case 30:

                            this.$ = Builder.node.variableAss({
                                line: _$[$0-2].first_line,
                                column: _$[$0-2].first_column,
                                name: $$[$0-2],
                                type: VariableAssigmentType.INCREMENT
                            });
                        
break;
case 31:

                            this.$ = Builder.node.variableAss({
                                line: _$[$0-2].first_line,
                                column: _$[$0-2].first_column,
                                name: $$[$0-2],
                                type: VariableAssigmentType.DECREMENT
                            });
                        
break;
case 32:

            this.$ = Builder.node.if({
                line: _$[$0-6].first_line,
                column: _$[$0-6].first_column,
                condition: $$[$0-4],
                statements: $$[$0-1],
                chain: []
            });
        
break;
case 33:

            this.$ = Builder.node.if({
                line: _$[$0-7].first_line,
                column: _$[$0-7].first_column,
                condition: $$[$0-5],
                statements: $$[$0-2],
                chain: $$[$0-1]
            });
        
break;
case 34:

                this.$ = $$[$0-1];
                this.$.push($$[$0]);
            
break;
case 35:

                this.$ = [$$[$0-3]];
            
break;
case 36:

            return Builder.node.else({
                line: _$[$0-3].first_line,
                column: _$[$0-3].first_column,
                statements: $$[$0-1]
            });
        
break;
case 39:

                this.$ = Builder.node.elseIf({
                    line: _$[$0-7].first_line,
                    column: _$[$0-7].first_column,
                    condition: $$[$0-4],
                    statements: $$[$0-1]
                });
            
break;
case 40:

                this.$ = Builder.node.switch({
                    line: _$[$0-6].first_line,
                    column: _$[$0-6].first_column,
                    value: $$[$0-4],
                    cases: $$[$0-1]
                });
            
break;
case 44:

                $$[$0-1].push($$[$0]);
                this.$ = $$[$0-1];
            
break;
case 45:

                this.$ = [$$[$0]];
            
break;
case 46:

            this.$ = Builder.node.case({
                line: _$[$0-3].first_line,
                column: _$[$0-3].first_column,
                condition: $$[$0-2],
                statements: $$[$0]
            });
        
break;
case 47:

                this.$ = Builder.node.default({
                    line: _$[$0-2].first_line,
                    column: _$[$0-2].first_column,
                    statements: $$[$0]
                });
            
break;
case 48:

            this.$ = Builder.node.while({
                line: _$[$0-6].first_line,
                column: _$[$0-6].first_column,
                condition: $$[$0-4],
                statements: $$[$0-1]
            });
        
break;
case 49:

            this.$ = Builder.node.for({
                line: _$[$0-10].first_line,
                column: _$[$0-10].first_column,
                init: $$[$0-8],
                condition: $$[$0-6],
                update: $$[$0-4],
                statements: $$[$0-1]
            });
        
break;
case 54:

                this.$ = Builder.node.doWhile({
                    line: _$[$0-8].first_line,
                    column: _$[$0-8].first_column,
                    condition: $$[$0-2],
                    statements: $$[$0-6]
                });
            
break;
case 55:
 this.$ = $$[$0-1]; 
break;
case 56:

                            this.$ = Builder.node.subroutineCall({
                                line: _$[$0-3].first_line,
                                column: _$[$0-3].first_column,
                                name: $$[$0-3],
                                args: $$[$0-1]
                            });
                        
break;
case 57:

                            this.$ = Builder.node.subroutineCall({
                                line: _$[$0-2].first_line,
                                column: _$[$0-2].first_column,
                                name: $$[$0-2],
                                args: []
                            });
                        
break;
case 58:

                                $$[$0-2].push($$[$0]);
                                this.$ = $$[$0-2];
                            
break;
case 59:

                                this.$ = [$$[$0]];
                            
break;
case 63:

                            this.$ = Builder.node.subroutineDcl({
                                line: _$[$0-6].first_line,
                                column: _$[$0-6].first_column,
                                name: $$[$0-5],
                                args: [],
                                statements: $$[$0-1],
                                type: SubroutineType.METHOD,
                                returnType: Symbols.VOID
                            });
                        
break;
case 64:

                            this.$ = Builder.node.subroutineDcl({
                                line: _$[$0-7].first_line,
                                column: _$[$0-7].first_column,
                                name: $$[$0-6],
                                args: $$[$0-4],
                                statements: $$[$0-1],
                                type: SubroutineType.METHOD,
                                returnType: Symbols.VOID
                            });
                        
break;
case 65:

                            this.$ = Builder.node.subroutineDcl({
                                line: _$[$0-6].first_line,
                                column: _$[$0-6].first_column,
                                name: $$[$0-5],
                                args: [],
                                statements: $$[$0-1],
                                type: SubroutineType.FUNCTION,
                                returnType: $$[$0-6]
                            });
                        
break;
case 66:

                            this.$ = Builder.node.subroutineDcl({
                                line: _$[$0-7].first_line,
                                column: _$[$0-7].first_column,
                                name: $$[$0-6],
                                args: $$[$0-4],
                                statements: $$[$0-1],
                                type: SubroutineType.FUNCTION,
                                returnType: $$[$0-7]
                            });
                        
break;
case 67:

                                    $$[$0-2].push($$[$0]);
                                    this.$ = $$[$0-2];
                                
break;
case 68:

                                    this.$ = [$$[$0]];
                                
break;
case 69:

                                    this.$ = Builder.node.argument({
                                        line: _$[$0-1].first_line,
                                        column: _$[$0-1].first_column,
                                        type: $$[$0-1],
                                        name: $$[$0]
                                    });
                                
break;
case 70:

                    this.$ = Builder.node.arithmeticExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: ArithmeticExpressionType.PLUS,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 71:

                    this.$ = Builder.node.arithmeticExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: ArithmeticExpressionType.MINUS,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 72:

                    this.$ = Builder.node.arithmeticExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: ArithmeticExpressionType.TIMES,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 73:

                    this.$ = Builder.node.arithmeticExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: ArithmeticExpressionType.DIVIDE,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 74:

                    this.$ = Builder.node.arithmeticExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: ArithmeticExpressionType.MOD,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 75:

                    this.$ = Builder.node.arithmeticExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: ArithmeticExpressionType.POWER,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 76:

                    this.$ = Builder.node.unaryMinusExp({
                        line: _$[$0-1].first_line,
                        column: _$[$0-1].first_column,
                        operand: $$[$0]
                    });
                
break;
case 77:

                    this.$ = $$[$0-1];
                
break;
case 78:

                    this.$ = Builder.node.relationalExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: RelationalExpresionType.EQUALS,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 79:

                    this.$ = Builder.node.relationalExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: RelationalExpresionType.NOT_EQUAL,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 80:

                    this.$ = Builder.node.relationalExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: RelationalExpresionType.LESS_THAN,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 81:

                    this.$ = Builder.node.relationalExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: RelationalExpresionType.LESS_THAN_OR_EQUAL,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 82:

                    this.$ = Builder.node.relationalExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: RelationalExpresionType.GREATER_THAN,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 83:

                    this.$ = Builder.node.relationalExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: RelationalExpresionType.GREATER_THAN_OR_EQUAL,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 84:

                    this.$ = Builder.node.logicalExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: LogicalExpressionType.AND,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 85:

                    this.$ = Builder.node.logicalExp({
                        line: _$[$0-2].first_line,
                        column: _$[$0-2].first_column,
                        operator: LogicalExpressionType.OR,
                        left: $$[$0-2],
                        right: $$[$0]
                    });
                
break;
case 86:

                    this.$ = Builder.node.unaryNotExp({
                        line: _$[$0-1].first_line,
                       column: _$[$0-1].first_column,
                        operand: $$[$0]
                    });
                
break;
case 87:

                    this.$ = Builder.node.ternaryExp({
                        line: _$[$0-4].first_line,
                        column: _$[$0-4].first_column,
                        condition: $$[$0-4],
                        trueExpression: $$[$0-2],
                        falseExpression: $$[$0]
                    });
                
break;
case 88:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0].first_line,
                        column: _$[$0].first_column,
                        value: Builder.node.literal({
                            line: _$[$0].first_line,
                            column: _$[$0].first_column,
                            type: Type.INT,
                            value: $$[$0]
                        })
                    });
                
break;
case 89:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0].first_line,
                        column: _$[$0].first_column,
                        value: Builder.node.literal({
                            line: _$[$0].first_line,
                            column: _$[$0].first_column,
                            type: Type.DOUBLE,
                            value: $$[$0]
                        })
                    });
                
break;
case 90:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0].first_line,
                        column: _$[$0].first_column,
                        value: Builder.node.literal({
                            line: _$[$0].first_line,
                            column: _$[$0].first_column,
                            type: Type.STRING,
                            value: $$[$0]
                        })
                    });
                
break;
case 91: case 93: case 94:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0].first_line,
                        column: _$[$0].first_column,
                        value: Builder.node.literal({
                            line: _$[$0].first_line,
                            column: _$[$0].first_column,
                            type: Type.BOOLEAN,
                            value: $$[$0]
                        })
                    });
                
break;
case 92:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0].first_line,
                        column: _$[$0].first_column,
                        value: Builder.node.literal({
                            line: _$[$0].first_line,
                            column: _$[$0].first_column,
                            type: Type.CHAR,
                            value: $$[$0]
                        })
                    });
                
break;
case 95:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0].first_line,
                        column: _$[$0].first_column,
                        value: Builder.node.reference({
                            line: _$[$0].first_line,
                            column: _$[$0].first_column,
                            name: $$[$0],
                            type: ReferenceType.DIRECT
                        })
                    });
                
break;
case 96:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0-1].first_line,
                        column: _$[$0-1].first_column,
                        value: Builder.node.reference({
                            line: _$[$0-1].first_line,
                            column: _$[$0-1].first_column,
                            name: $$[$0-1],
                            type: ReferenceType.INCREMENT
                        })
                    });
                
break;
case 97:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0-1].first_line,
                        column: _$[$0-1].first_column,
                        value: Builder.node.reference({
                            line: _$[$0-1].first_line,
                            column: _$[$0-1].first_column,
                            name: $$[$0-1],
                            type: ReferenceType.DECREMENT
                        })
                    });
                
break;
case 98:

                    this.$ = Builder.node.terminalExp({
                        line: _$[$0].first_line,
                        column: _$[$0].first_column,
                        value: Builder.node.call({
                            line: _$[$0].first_line,
                            column: _$[$0].first_column,
                            call: $$[$0]
                        })
                    });
                
break;
        }
    }
}


/* generated by ts-jison-lex 0.3.0 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';
export class AnalyzerLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"case-insensitive":true,"moduleName":"Analyzer"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\s+)/i,/^(?:([a-zA-ZÑñ]|(_[a-zA-ZÑñ]))([a-zA-ZÑñ]|[0-9]|_)*)/i,/^(?:'([^\r\n'\\]|\\[btnfr"'\\]|\\[0-9a-fA-F]{2}|\\u[0-9a-fA-F]{4})')/i,/^(?:"(?:[["\\"]["bnrt/["\\"]|[^"["\\"])*")/i,/^(?:[0-9]+)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:>=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:&&)/i,/^(?:\\\|\\\|)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:=)/i,/^(?:\\\+\\\+)/i,/^(?:\\-\\-)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:void\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:return\b)/i,/^(?:continue\b)/i,/^(?:break\b)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:$)/i,/^(?:.)/i];
    conditions: any = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0:/* skip */
      break;
    case 1:/* skip */
      break;
    case 2:/* skip */
      break;
    case 3: yy_.yytext = yy_.yytext.toLowerCase();  return "ID"; 
      break;
    case 4: yy_.yytext = yy_.yytext.substring(1, yy_.yytext.length()-2); return "CHAR_LITERAL"; 
      break;
    case 5: yy_.yytext = yy_.yytext.substring(1, yy_.yytext.length()-2); return "STRING_LITERAL"; 
      break;
    case 6: return "INT_LITERAL"; 
      break;
    case 7: return "DOUBLE_LITERAL"; 
      break;
    case 8: return "INT"; 
      break;
    case 9: return "DOUBLE"; 
      break;
    case 10: return "BOOLEAN"; 
      break;
    case 11: return "CHAR"; 
      break;
    case 12: return "STRING"; 
      break;
    case 13: return "PLUS"; 
      break;
    case 14: return "MINUS"; 
      break;
    case 15: return "TIMES"; 
      break;
    case 16: return "DIVIDE"; 
      break;
    case 17: return "MOD"; 
      break;
    case 18: return "EQUALS"; 
      break;
    case 19: return "NOT_EQUAL"; 
      break;
    case 20: return "LESS_THAN"; 
      break;
    case 21: return "LESS_THAN_OR_EQUAL"; 
      break;
    case 22: return "GREATER_THAN"; 
      break;
    case 23: return "GREATER_THAN_OR_EQUAL"; 
      break;
    case 24: return "INTERROGATION"; 
      break;
    case 25: return "COLON"; 
      break;
    case 26: return "AND"; 
      break;
    case 27: return "OR;" 
      break;
    case 28: return "NOT"; 
      break;
    case 29: return "LPAREN"; 
      break;
    case 30: return "RPAREN"; 
      break;
    case 31: return "SEMICOLON"; 
      break;
    case 32: return "EQUAL"; 
      break;
    case 33: return "PLUS_PLUS"; 
      break;
    case 34: return "MINUS_MINUS"; 
      break;
    case 35: return "LBRACKET"; 
      break;
    case 36: return "RBRACKET"; 
      break;
    case 37: return "LBRACE"; 
      break;
    case 38: return "RBRACE"; 
      break;
    case 39: return "IF"; 
      break;
    case 40: return "ELSE"; 
      break;
    case 41: return "SWITCH"; 
      break;
    case 42: return "CASE"; 
      break;
    case 43: return "DEFAULT"; 
      break;
    case 44: return "WHILE"; 
      break;
    case 45: return "FOR"; 
      break;
    case 46: return "DO"; 
      break;
    case 47: return "VOID"; 
      break;
    case 48: return "TRUE"; 
      break;
    case 49: return "FALSE"; 
      break;
    case 50: return "RETURN"; 
      break;
    case 51: return "CONTINUE"; 
      break;
    case 52: return "BREAK"; 
      break;
    case 53: return "COMMA"; 
      break;
    case 54: return "DOT"; 
      break;
    case 55: return "EOF"; 
      break;
    case 56: return "ERROR"; 
      break;
        }
    }
}

